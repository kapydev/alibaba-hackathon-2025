This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitattributes
.gitignore
ARCHITECTURE.md
components.json
deploy.bat
k8s/api-deployment.yaml
k8s/api-service.yaml
k8s/ingress.yaml
k8s/web-deployment.yaml
k8s/web-service.yaml
LICENSE
manifest.json
package.json
packages/backend/Dockerfile
packages/backend/esbuild.config.mjs
packages/backend/package.json
packages/backend/src/ai/llm.ts
packages/backend/src/index.ts
packages/backend/src/routers/llm.ts
packages/backend/src/trpc.ts
packages/figmaplugincore/Dockerfile
packages/figmaplugincore/esbuild.config.mjs
packages/figmaplugincore/esbuild/globalShims.js
packages/figmaplugincore/package.json
packages/figmaplugincore/src/ai/llm.ts
packages/figmaplugincore/src/constants.ts
packages/figmaplugincore/src/handleFuncsEditFigma/handleChangeColor.ts
packages/figmaplugincore/src/handlerFuncs/clearCaches.ts
packages/figmaplugincore/src/handlerFuncs/deselectAll.ts
packages/figmaplugincore/src/handlerFuncs/focusNode.ts
packages/figmaplugincore/src/handlerFuncs/getDesignQualityStats.ts
packages/figmaplugincore/src/handlerFuncs/getDesignSystem.ts
packages/figmaplugincore/src/handlerFuncs/getImageArrBuf.ts
packages/figmaplugincore/src/handlerFuncs/getImageFromSelectedFrame.ts
packages/figmaplugincore/src/handlerFuncs/getJSONTree.ts
packages/figmaplugincore/src/handlerFuncs/getNodeArrBuf.ts
packages/figmaplugincore/src/handlerFuncs/getNodeSVGs.ts
packages/figmaplugincore/src/handlerFuncs/getNumberOfConversions.ts
packages/figmaplugincore/src/handlerFuncs/getSerializedFigmaNode.ts
packages/figmaplugincore/src/handlerFuncs/handleCreateComponentLibrary.ts
packages/figmaplugincore/src/handlerFuncs/handleDownloadTestCases.ts
packages/figmaplugincore/src/handlerFuncs/handleGenerateAndDeserialize/deserialize.ts
packages/figmaplugincore/src/handlerFuncs/handleGenerateAndDeserialize/handleGenerateAndDeserialize.ts
packages/figmaplugincore/src/handlerFuncs/handleGenerateAndDeserialize/index.ts
packages/figmaplugincore/src/handlerFuncs/handleGetBlockingNodes.ts
packages/figmaplugincore/src/handlerFuncs/handleGetSavedConfiguration.ts
packages/figmaplugincore/src/handlerFuncs/handleGetSelectedIds.ts
packages/figmaplugincore/src/handlerFuncs/handleGetUserSession.ts
packages/figmaplugincore/src/handlerFuncs/handleGetUUID.ts
packages/figmaplugincore/src/handlerFuncs/handleIncrementNumberOfConversions.ts
packages/figmaplugincore/src/handlerFuncs/handleIncrementNumberOfLogins.ts
packages/figmaplugincore/src/handlerFuncs/handleOpenCommand.ts
packages/figmaplugincore/src/handlerFuncs/handleResize.ts
packages/figmaplugincore/src/handlerFuncs/handleSaveImagesDict.ts
packages/figmaplugincore/src/handlerFuncs/handleSelectTopLevelComponents.ts
packages/figmaplugincore/src/handlerFuncs/handleSetUserSession.ts
packages/figmaplugincore/src/handlerFuncs/handleUpdateDesignSystem.ts
packages/figmaplugincore/src/handlerFuncs/handleUpdateLastLoginDate.ts
packages/figmaplugincore/src/handlerFuncs/handleUpdateSavedConfiguration.ts
packages/figmaplugincore/src/handlerFuncs/handleUpdateUIStyleManager.ts
packages/figmaplugincore/src/handlerFuncs/init.ts
packages/figmaplugincore/src/handlerFuncs/promptDownload.ts
packages/figmaplugincore/src/handlerFuncs/setRelaunchData.ts
packages/figmaplugincore/src/handlerFuncs/updateDesignLanguage.ts
packages/figmaplugincore/src/handlerFuncs/updateFeatureFlags.ts
packages/figmaplugincore/src/handlerFuncs/updateIsPluginDevMode.ts
packages/figmaplugincore/src/handlerFuncs/updateNumAbsolute.ts
packages/figmaplugincore/src/handlerFuncs/updateSavedConfiguration.ts
packages/figmaplugincore/src/handlerFuncs/updateSelectedLayer.ts
packages/figmaplugincore/src/handlerFuncs/updateTailwindConfig.ts
packages/figmaplugincore/src/helpers/getFigmaNodeById.ts
packages/figmaplugincore/src/index.ts
packages/figmaplugincore/src/messaging/index.ts
packages/figmaplugincore/src/messaging/messaging.ts
packages/figmaplugincore/src/messaging/pluginCoreHandlers.ts
packages/figmaplugincore/src/routers/llm.ts
packages/figmaplugincore/src/trpc.ts
packages/figmapluginui/.gitignore
packages/figmapluginui/Dockerfile
packages/figmapluginui/eslint.config.js
packages/figmapluginui/index.html
packages/figmapluginui/package.json
packages/figmapluginui/public/vite.svg
packages/figmapluginui/README.md
packages/figmapluginui/src/api/createEventListener.ts
packages/figmapluginui/src/api/sendMidEnd.ts
packages/figmapluginui/src/App.tsx
packages/figmapluginui/src/assets/react.svg
packages/figmapluginui/src/features/Message.tsx
packages/figmapluginui/src/features/SelectionDisplay.tsx
packages/figmapluginui/src/hooks/useDarkMode.tsx
packages/figmapluginui/src/llm/baseLlm.ts
packages/figmapluginui/src/llm/qwen.ts
packages/figmapluginui/src/main.tsx
packages/figmapluginui/src/messages/BaseMessage.ts
packages/figmapluginui/src/messages/LLMOutputParser.ts
packages/figmapluginui/src/messages/Messages.ts
packages/figmapluginui/src/messages/SystemPromptMessage.ts
packages/figmapluginui/src/messages/ToolMessage.ts
packages/figmapluginui/src/messages/tools/index.ts
packages/figmapluginui/src/messages/tools/toolTemplates.tsx
packages/figmapluginui/src/messages/tools/toolTemplatesOld.tsx
packages/figmapluginui/src/messages/tools/toolToLLMDescription.ts
packages/figmapluginui/src/stores/chatStore.ts
packages/figmapluginui/src/stores/selectedLayerStore.ts
packages/figmapluginui/src/trpc/trpc.ts
packages/figmapluginui/src/vite-env.d.ts
packages/figmapluginui/tailwind.config.ts
packages/figmapluginui/tsconfig.app.json
packages/figmapluginui/tsconfig.json
packages/figmapluginui/tsconfig.node.json
packages/figmapluginui/vite.config.ts
packages/shadcn/src/components/ui/accordion.tsx
packages/shadcn/src/components/ui/alert-dialog.tsx
packages/shadcn/src/components/ui/aspect-ratio.tsx
packages/shadcn/src/components/ui/avatar.tsx
packages/shadcn/src/components/ui/badge.tsx
packages/shadcn/src/components/ui/breadcrumb.tsx
packages/shadcn/src/components/ui/button.tsx
packages/shadcn/src/components/ui/card.tsx
packages/shadcn/src/components/ui/carousel.tsx
packages/shadcn/src/components/ui/checkbox.tsx
packages/shadcn/src/components/ui/combobox.tsx
packages/shadcn/src/components/ui/command.tsx
packages/shadcn/src/components/ui/context-menu.tsx
packages/shadcn/src/components/ui/dialog.tsx
packages/shadcn/src/components/ui/drawer.tsx
packages/shadcn/src/components/ui/dropdown-menu.tsx
packages/shadcn/src/components/ui/input.tsx
packages/shadcn/src/components/ui/label.tsx
packages/shadcn/src/components/ui/menubar.tsx
packages/shadcn/src/components/ui/navigation-menu.tsx
packages/shadcn/src/components/ui/pagination.tsx
packages/shadcn/src/components/ui/popover.tsx
packages/shadcn/src/components/ui/progress.tsx
packages/shadcn/src/components/ui/radio-group.tsx
packages/shadcn/src/components/ui/resizable.tsx
packages/shadcn/src/components/ui/scroll-area.tsx
packages/shadcn/src/components/ui/select.tsx
packages/shadcn/src/components/ui/seperator.tsx
packages/shadcn/src/components/ui/skeleton.tsx
packages/shadcn/src/components/ui/slider.tsx
packages/shadcn/src/components/ui/switch.tsx
packages/shadcn/src/components/ui/table.tsx
packages/shadcn/src/components/ui/tabs.tsx
packages/shadcn/src/components/ui/textarea.tsx
packages/shadcn/src/components/ui/toggle-group.tsx
packages/shadcn/src/components/ui/toggle.tsx
packages/shadcn/src/components/ui/tooltip.tsx
packages/shadcn/src/lib/utils.ts
packages/shadcn/src/styles/globals.css
packages/shadcn/tsconfig.json
packages/shared/src/createStore.ts
packages/shared/src/findLatest.ts
packages/shared/src/index.ts
packages/shared/src/supabase.ts
packages/shared/src/traverse.ts
packages/shared/tsconfig.json
packages/types/src/index.ts
packages/types/src/rawMessages.ts
packages/types/src/supabaseTypes.ts
packages/types/tsconfig.json
packages/webapp/.gitignore
packages/webapp/Dockerfile
packages/webapp/eslint.config.js
packages/webapp/index.html
packages/webapp/package.json
packages/webapp/public/vite.svg
packages/webapp/README.md
packages/webapp/src/App.tsx
packages/webapp/src/assets/react.svg
packages/webapp/src/main.tsx
packages/webapp/src/trpc/trpc.ts
packages/webapp/src/vite-env.d.ts
packages/webapp/tailwind.config.ts
packages/webapp/tsconfig.app.json
packages/webapp/tsconfig.json
packages/webapp/tsconfig.node.json
packages/webapp/vite.config.ts
README.md
supabase/.gitignore
supabase/config.toml
test.js
tsconfig.app.json
tsconfig.base.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
# Auto detect text files and perform LF normalization
* text=auto
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
</file>

<file path="ARCHITECTURE.md">
# General Overview

The backend and frontends are stateless, and main source of truth is the database, which is already scalable by itself.

```mermaid
graph TD
    subgraph Internet
        user[User]
    end

    subgraph Ingress Controller (NGINX)
        ingress[Ingress<br>webapp.local:80/443]
    end

    subgraph Kubernetes Cluster
        ingress --> websvc[Service: web-service]
        websvc --> web1[Pod: web (replica 1)]
        websvc --> web2[Pod: web (replica 2)]
        websvc --> webN[... auto-scaled by HPA]

        web1 --> apisvc[Service: api-service]
        web2 --> apisvc

        apisvc --> api1[Pod: api (replica 1)]
        apisvc --> api2[Pod: api (replica 2)]
        apisvc --> apiN[... auto-scaled by HPA]
    end

    user --> ingress
```

# Alibaba Cloud Integration

<!-- TODO: Update with more specific examples -->
We use Qwen LLM for AI related services, PAI for AI training, and deploy across several alibaba ECS instances by utilising AKS (Alibaba Kubernetes Service)

# Scalability

In the case that our single backend and frontends get overloaded, we can easily add Horizontal auto scaling to our kubernetes setup to take advantage of making new pods on Alibaba cloud.

That way, when a high CPU load is detected, it will spin up more frontend services/backend services as required.

```
kubectl autoscale deployment web-deployment \
  --cpu-percent=50 \
  --min=1 \
  --max=5
```

When more pods are available, the incoming requests are sent round-robin to each pod, so that each pod has takes on an even load of the incoming traffic.

# Security
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "packages/components/src/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="deploy.bat">
@echo off
SETLOCAL ENABLEDELAYEDEXPANSION

echo 📦 Building Docker images...

docker build -t hackathon-webapp:latest -f packages/webapp/Dockerfile .
IF %ERRORLEVEL% NEQ 0 (
    echo ❌ Failed to build webapp
    EXIT /B %ERRORLEVEL%
)

docker build -t hackathon-backend:latest -f packages/backend/Dockerfile .
IF %ERRORLEVEL% NEQ 0 (
    echo ❌ Failed to build backend
    EXIT /B %ERRORLEVEL%
)

echo ☸️ Deploying Kubernetes resources from .\k8s\...

kubectl apply -f k8s\
IF %ERRORLEVEL% NEQ 0 (
    echo ❌ Failed to apply Kubernetes configs
    EXIT /B %ERRORLEVEL%
)

echo ✅ Deployment complete!
</file>

<file path="k8s/api-deployment.yaml">
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: backend:latest
          ports:
            - containerPort: 3000
</file>

<file path="k8s/api-service.yaml">
apiVersion: v1
kind: Service
metadata:
  name: api-service
spec:
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
</file>

<file path="k8s/ingress.yaml">
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: webapp.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web-service
                port:
                  number: 80
</file>

<file path="k8s/web-deployment.yaml">
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: web
          image: webapp:latest
          ports:
            - containerPort: 80
</file>

<file path="k8s/web-service.yaml">
apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  selector:
    app: web
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Philip Andrew Wee De Wang

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="manifest.json">
{
  "name": "Taffy",
  "id": "1492040236290118921",
  "api": "1.0.0",
  "ui": "./packages/figmapluginui/dist/index-spoof.html",
  "main": "./packages/figmaplugincore/dist/main.cjs",
  "documentAccess": "dynamic-page",
  "editorType": ["figma"]
}
</file>

<file path="packages/backend/Dockerfile">
FROM node:20.14.0-slim

# Put everything in /app
WORKDIR /app

# Copy root package json and package lock
COPY package*.json ./

# Copy folder
COPY packages/backend ./packages/backend

# Install backend workspace
RUN npm install --workspace=packages/backend --force

WORKDIR /app/packages/backend


CMD ["node", "/dist/main.js"]
</file>

<file path="packages/backend/esbuild.config.mjs">
import * as esbuild from "esbuild";
import { spawn } from "child_process";
import dotenv from "dotenv";
import appRoot from "app-root-path";
import path from "path";

const env = dotenv.config({
  path: path.resolve(appRoot.path, ".env"),
});

const DEFINED_PROCESS_ENVS = {};

Object.entries(env.parsed ?? {}).forEach(([key, val]) => {
  DEFINED_PROCESS_ENVS[`process.env.${key}`] = JSON.stringify(val);
});

/**
 * Tehcnically not a config file, its named like this to make it look nicer
 */

let nodeProcess;

const runAfterBuildPlugin = {
  name: "run-after-build",
  setup(build) {
    build.onEnd(() => {
      if (nodeProcess) nodeProcess.kill();
      nodeProcess = spawn("node", ["dist/main.js"], {
        stdio: "inherit",
      });
    });
  },
};

const buildOptions = {
  entryPoints: ["src/index.ts"],
  bundle: true,
  platform: "node",
  target: ["node20.14.0"],
  outfile: "dist/main.js",
  define: DEFINED_PROCESS_ENVS,
};

const command = process.argv[2];

if (command === "dev") {
  const ctx = await esbuild.context({
    ...buildOptions,
    plugins: [runAfterBuildPlugin],
  });
  await ctx.watch();
  console.log("Watching for changes...");
} else if (command === "build") {
  await esbuild.build({
    ...buildOptions,
    minify: true,
  });
  console.log("Build completed successfully!");
} else {
  console.error("Please specify either 'dev' or 'build' command");
  process.exit(1);
}
</file>

<file path="packages/backend/package.json">
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "node esbuild.config.mjs dev",
    "build": "node esbuild.config.mjs build"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}
</file>

<file path="packages/backend/src/ai/llm.ts">
import OpenAI from "openai";

export const openai = new OpenAI({
  // If the environment variable is not configured, replace the following line with your API key: apiKey: "sk-xxx",
  apiKey: process.env.ALIBABA_MODEL_STUDIO_KEY,
  baseURL: "https://dashscope-intl.aliyuncs.com/compatible-mode/v1",
});
</file>

<file path="packages/backend/src/index.ts">
import { publicProcedure, router } from "./trpc";
import { createHTTPServer } from "@trpc/server/adapters/standalone";
import cors from "cors";
import { openai } from "./ai/llm";
import { aiRouter } from "./routers/llm";

const appRouter = router({
  ai: aiRouter,
});

export type AppRouter = typeof appRouter;

const server = createHTTPServer({
  middleware: cors(),
  router: appRouter,
});

server.listen(3000);
console.log("SERVER RUNNING ON 3000");
</file>

<file path="packages/backend/src/trpc.ts">
import { initTRPC } from '@trpc/server';
 
/**
 * Initialization of tRPC backend
 * Should be done only once per backend!
 */
const t = initTRPC.create();
 
/**
 * Export reusable router and procedure helpers
 * that can be used throughout the router
 */
export const router = t.router;
export const publicProcedure = t.procedure;
</file>

<file path="packages/figmaplugincore/Dockerfile">
FROM node:20.14.0-slim

# Put everything in /app
WORKDIR /app

# Copy root package json and package lock
COPY package*.json ./

# Copy folder
COPY packages/backend ./packages/backend

# Install backend workspace
RUN npm install --workspace=packages/backend --force

WORKDIR /app/packages/backend


CMD ["node", "/dist/main.js"]
</file>

<file path="packages/figmaplugincore/esbuild/globalShims.js">
// eslint-disable-next-line @typescript-eslint/no-this-alias
let globalThisShim = eval('this');
let globalShim = globalThisShim;
export { globalThisShim as globalThis, globalShim as global };
</file>

<file path="packages/figmaplugincore/package.json">
{
  "name": "figmaplugincore",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "node esbuild.config.mjs dev",
    "build": "node esbuild.config.mjs build"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}
</file>

<file path="packages/figmaplugincore/src/ai/llm.ts">
import OpenAI from "openai";

export const openai = new OpenAI({
  // If the environment variable is not configured, replace the following line with your API key: apiKey: "sk-xxx",
  apiKey: process.env.ALIBABA_MODEL_STUDIO_KEY,
  baseURL: "https://dashscope-intl.aliyuncs.com/compatible-mode/v1",
});
</file>

<file path="packages/figmaplugincore/src/constants.ts">
export const MIN_WINDOW_WIDTH = 365;
export const MIN_WINDOW_HEIGHT = 485;

export const MAX_WINDOW_WIDTH = 970;
export const MAX_WINDOW_HEIGHT = 680;
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/clearCaches.ts">
// import { clearIsNodeVisibleCache } from '@firejet-sync/figma-plugin/helpers';

/**While obtaining the tree, certain operations are memoized and cached for efficiency */
export function clearTreeGenerationCaches() {
  // clearIsNodeVisibleCache();
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/deselectAll.ts">
export function deselectAll() {
  figma.currentPage.selection = [];
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/focusNode.ts">
import { getFigmaNodeById } from "../helpers/getFigmaNodeById";

let myIdentifierRect: RectangleNode | undefined;

export function removeIdentifierRect() {
  if (myIdentifierRect) {
    try {
      myIdentifierRect.remove();
    } catch {
      //We just need to try to remove the identifier rectangle
    }
    myIdentifierRect = undefined;
  }
}
//TODO: Focus node in such a way that the FireJet viewport is not blocking it
export async function runFocusNode(data: {
  nodeId: string;
  outline?: boolean;
  zoomIntoView?: boolean;
  select?: boolean;
}) {
  const focusResult = focusNode(data);
  if (focusResult !== undefined) {
    throw new Error(`Unabled to focus node ${data.nodeId}`);
  }
}

/** Returns false if node cannot be focused, true otherwise */
export async function focusNode(data: {
  nodeId: string;
  outline?: boolean;
  zoomIntoView?: boolean;
  select?: boolean;
}): Promise<boolean> {
  removeIdentifierRect();

  const relevantNode = getFigmaNodeById(data.nodeId);

  if (!relevantNode) return false;
  if (!("absoluteRenderBounds" in relevantNode)) return false;

  if (data.zoomIntoView) {
    figma.viewport.scrollAndZoomIntoView([relevantNode]);
  }
  if (data.outline) {
    createIdentifierBox([relevantNode]);
  }
  if (data.select) {
    figma.currentPage.selection = [relevantNode];
  }
  // figma.currentPage.selection = [relevantNode as SceneNode];

  return true;
}

function createIdentifierBox(nodesToIdentify: Array<LayoutMixin>) {
  const nonInvisibleNodes = nodesToIdentify.filter(
    (node) => node.absoluteRenderBounds
  ) as Array<
    LayoutMixin & {
      absoluteRenderBounds: Rect;
    }
  >;

  const topLeftX = Math.min(
    ...nonInvisibleNodes.map((node) => node.absoluteRenderBounds.x)
  );
  const topLeftY = Math.min(
    ...nonInvisibleNodes.map((node) => node.absoluteRenderBounds.y)
  );
  const bottomRightX = Math.max(
    ...nonInvisibleNodes.map(
      (node) => node.absoluteRenderBounds.x + node.absoluteRenderBounds.width
    )
  );
  const bottomRightY = Math.max(
    ...nonInvisibleNodes.map(
      (node) => node.absoluteRenderBounds.y + node.absoluteRenderBounds.height
    )
  );
  myIdentifierRect = figma.createRectangle();
  myIdentifierRect.x = topLeftX;
  myIdentifierRect.y = topLeftY;
  const width = bottomRightX - topLeftX;
  const height = bottomRightY - topLeftY;
  myIdentifierRect.resize(width, height);
  myIdentifierRect.fills = [];
  myIdentifierRect.strokes = [
    {
      type: "SOLID",
      visible: true,
      opacity: 1,
      blendMode: "NORMAL",
      color: { r: 1, g: 0, b: 0 },
    },
  ];

  myIdentifierRect.strokeWeight = 3 / figma.viewport.zoom;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/getDesignQualityStats.ts">
export function getDesignQualityStats(selection: readonly SceneNode[]) {
  let numAbsolute = 0;
  let numAutoLayout = 0;

  const queue: SceneNode[] = [...selection];
  let curNodeCount = 0;

  const MAX_NODES_CHECKED = 100;

  while (queue.length > 0) {
    const curNode = queue.shift();

    if (!curNode) break;
    if (curNodeCount > MAX_NODES_CHECKED) break;

    if ('layoutMode' in curNode) {
      if (curNode.layoutMode === 'NONE') {
        numAbsolute += 1;
      } else {
        numAutoLayout += 1;
      }
    }

    if ('children' in curNode) {
      queue.push(...curNode.children);
    }

    curNodeCount += 1;
  }

  return {
    numAbsolute,
    numAutoLayout,
    ratioAbsolute: numAbsolute / (numAbsolute + numAutoLayout),
  };
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/getDesignSystem.ts">
import { DesignLanguage } from '@firejet-sync/shared/types';
import { updateDesignLanguage } from './updateDesignLanguage';

const logger = console;

export async function getDesignSystem() {
  let designSystem = (await figma.clientStorage.getAsync('designSystem')) as
    | DesignLanguage
    | undefined;
  if (!designSystem) {
    designSystem = { tokens: {} };
    await updateDesignLanguage({ tokens: {} });
  }
  logger.log('DESIGN SYSTEM: ', designSystem);
  return designSystem;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/getImageArrBuf.ts">
import { tryGet } from '@firejet-sync/shared/errors';
const logger = console;

export async function getImageArrBufs(imageHashes: string[]) {
  const hashToLink: Record<string, Uint8Array> = {};
  await Promise.all(
    imageHashes.map(async (imageHash) => {
      const image = tryGet(() => figma.getImageByHash(imageHash), undefined);
      if (!image) return undefined;
      const imgArr = await tryGet(
        async () => await image.getBytesAsync(),
        undefined,
      );
      if (!imgArr) return;
      hashToLink[imageHash] = imgArr;
    }),
  );
  return hashToLink;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/getImageFromSelectedFrame.ts">
import { sendFrontend } from '../messaging';

export async function getImageFromSelectedFrame() {
  //Get images of everything on page
  const selectedComponents = figma.currentPage.selection;

  const allResults = await Promise.all(
    selectedComponents.map(async (component) => {
      const result = await component.exportAsync({ format: 'PNG' });
      return {
        name: component.name,
        expectedImage: result,
        nodeId: component.id,
      };
    }),
  );
  sendFrontend('imageFromSelectedFrame', allResults);

  // return sendReply();
}

// TODO remove and fix such that you can run this in multiple places at the same time
export async function getFullDesignImageFromSelectedFrame() {
  //Get images of everything on page
  const selectedComponents = figma.currentPage.selection;

  const allResults = await Promise.all(
    selectedComponents.map(async (component) => {
      const result = await component.exportAsync({ format: 'PNG' });
      return {
        name: component.name,
        expectedImage: result,
        nodeId: component.id,
      };
    }),
  );
  sendFrontend('fullDesignImageFromSelectedFrame', allResults);

  // return sendReply();
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/getJSONTree.ts">
import { throwOnDev } from '@firejet-sync/shared/errors';
import { booleanFilter } from '@firejet-sync/shared/helpers';
import { ConversionConfig } from '@firejet-sync/shared/types';

export async function getJSONTrees({
  nodeIds,
  // config,
}: {
  nodeIds: string[];
  // config: ConversionConfig;
}) {
  const serializedNodes = (
    await Promise.all(
      nodeIds.map(async (nodeId) => {
        try {
          const node = await figma.getNodeByIdAsync(nodeId);
          if (!node) return undefined;
          if (!('exportAsync' in node)) {
            throwOnDev('NODE_NOT_EXPORTABLE');
            return undefined;
          }
          const nodeObj = await node.exportAsync({
            format: 'JSON_REST_V1',
            //TODO: Need to handle the missing geometry paths option somehow
            // geometry: 'paths',
          } as ExportSettingsREST);
          return nodeObj;
        } catch {
          return undefined;
        }
      }),
    )
  ).filter(booleanFilter);

  return serializedNodes;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/getNodeArrBuf.ts">
import { tryGet } from '@firejet-sync/shared/errors';

export async function getNodeArrBuf(nodeId: string) {
  const node = await tryGet(() => figma.getNodeByIdAsync(nodeId), null);
  if (!node) return undefined;
  if (!('exportAsync' in node)) return undefined;
  const imgArr = await tryGet(
    () =>
      node.exportAsync({
        format: 'PNG',
      }),
    null,
  );
  if (!imgArr) return undefined;
  return imgArr;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/getNodeSVGs.ts">
import { booleanFilter } from '@firejet-sync/shared/helpers';

export async function getNodeSVGs(nodeIds: string[]) {
  const idToSVG: Record<string, string> = {};
  await Promise.all(
    nodeIds.map(async (nodeId) => {
      try {
        const node = await figma.getNodeByIdAsync(nodeId);
        if (!node) return undefined;
        if (!('exportAsync' in node)) return undefined;
        const svgStr = await node.exportAsync({
          format: 'SVG_STRING',
        });
        idToSVG[nodeId] = svgStr;
      } catch {}
    }),
  );
  return idToSVG;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/getNumberOfConversions.ts">
import { sendFrontend } from '../messaging';

export async function getNumberOfConversions() {
  const numberOfConversions = await figma.clientStorage.getAsync(
    'numberOfConversions',
  );

  if (numberOfConversions === undefined || Number.isNaN(numberOfConversions)) {
    await figma.clientStorage.setAsync('numberOfConversions', 0);
    //TODO bring all the other derivatives (e.g. remaining conversions into this data sent)
    sendFrontend('numberOfConversions', { count: 0 });
  } else {
    sendFrontend('numberOfConversions', {
      count: numberOfConversions,
    });
  }
  // DO NOT REMOVE - this clears the clientstorage for testing
  // figma.clientStorage.deleteAsync('numberOfConversions');
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/getSerializedFigmaNode.ts">
import { serializeFigmaNodes } from '@firejet/firejet-js';

import { sendFrontend } from '../messaging';

export async function getSerializedFigmaNode() {
  const serializedNodes = {
    engineOne: null,
    engineTwo: await serializeFigmaNodes(figma.currentPage.selection),
  };

  sendFrontend('newRawTree', serializedNodes);

  return serializedNodes;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleCreateComponentLibrary.ts">
import { UserComponentExtended } from '@firejet-sync/shared/types';
import { compDataToSceneNode } from '../shared/compDataToSceneNode';
import { booleanFilter } from '@firejet-sync/shared/helpers';

interface CreateComponentLibrary {
  library: UserComponentExtended[];
  libraryName: string;
}

export async function handleCreateComponentLibrary(
  data: CreateComponentLibrary,
) {
  const sceneNodes = (
    await Promise.all(
      data.library.map((compData) => compDataToSceneNode(compData)),
    )
  ).filter(booleanFilter);

  const container = figma.createFrame();
  container.layoutMode = 'VERTICAL';
  container.itemSpacing = 16;
  container.name = data.libraryName;
  container.fills = [];
  container.clipsContent = false;
  container.layoutSizingHorizontal = 'HUG';
  container.layoutSizingVertical = 'HUG';
  sceneNodes.forEach((sceneNode) => container.appendChild(sceneNode));

  figma.currentPage.appendChild(container);

  return container;
}

export async function handleCreateComponentLibraryAndSampleInstances(
  data: CreateComponentLibrary,
) {
  const componentSetContainer = await handleCreateComponentLibrary(data);

  const instances = componentSetContainer.children
    .map((child) => {
      if (child.type === 'COMPONENT') {
        return child.createInstance();
      } else if (child.type === 'COMPONENT_SET') {
        const childComponent = child.children.find(
          (furtherChild) => furtherChild.type === 'COMPONENT',
        );
        if (childComponent?.type === 'COMPONENT') {
          return childComponent.createInstance();
        }
      }
      return undefined;
    })
    .filter(booleanFilter);

  const sampleInstanceContainer = figma.createFrame();
  sampleInstanceContainer.layoutMode = 'VERTICAL';
  sampleInstanceContainer.itemSpacing = 16;
  sampleInstanceContainer.name = data.libraryName;
  sampleInstanceContainer.fills = [];
  sampleInstanceContainer.clipsContent = false;
  sampleInstanceContainer.layoutSizingHorizontal = 'HUG';
  sampleInstanceContainer.layoutSizingVertical = 'HUG';
  instances.forEach((sceneNode) =>
    sampleInstanceContainer.appendChild(sceneNode),
  );

  const container = figma.createFrame();
  container.layoutMode = 'HORIZONTAL';
  container.itemSpacing = 64;
  container.name = data.libraryName;
  container.fills = [];
  container.clipsContent = false;
  container.layoutSizingHorizontal = 'HUG';
  container.layoutSizingVertical = 'HUG';
  [sampleInstanceContainer, componentSetContainer].forEach((sceneNode) =>
    container.appendChild(sceneNode),
  );

  figma.currentPage.appendChild(container);

  return container;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleDownloadTestCases.ts">
import { handleGetAllAssets, serializeFigmaNodes } from '@firejet/firejet-js';
import { sendFrontend } from '../messaging';
import { TestCase } from '@firejet-sync/shared/types';

export async function handleDownloadSingleTestCase(
  nodes: SceneNode[],
  meta: {
    name: string;
    id: string;
  },
) {
  const usedSizes = new Set<number>();

  nodes.forEach((n) => {
    if (!n.absoluteBoundingBox) throw new Error('NO_BOUNDING_BOX');

    // FIXME: this is not a very good bound to have. The test cases should ideally have a metadata file which contains additional information
    if (usedSizes.has(n.absoluteBoundingBox.width))
      throw new Error(`REPEATED_SIZE ${n.absoluteBoundingBox.width}`);
  });

  // Sort by ascending order of width to guarantee that the test runner loads the images in the same way
  nodes.sort(
    (a, b) => a.absoluteBoundingBox!.width - b.absoluteBoundingBox!.width,
  );

  const serializedNodes = await serializeFigmaNodes(nodes);

  const targetImages = Object.fromEntries(
    await Promise.all(
      nodes.map(async (node) => {
        return [
          String(Math.round(node.absoluteBoundingBox!.width)),
          await node.exportAsync({ format: 'PNG', useAbsoluteBounds: true }),
        ] as const;
      }),
    ),
  );

  const assets = await handleGetAllAssets({
    nodeIds: nodes.map((node) => node.id),
  });

  const testCase = {
    ...meta,
    expected: targetImages,
    testCase: serializedNodes,
    assets,
  } satisfies TestCase;

  sendFrontend('handleTestCase', testCase);
}

export async function handleDownloadTestCases() {
  const testCases = figma.currentPage.selection;
  sendFrontend('handleTestCaseCount', { count: testCases.length });

  for (const selection of testCases) {
    const meta = {
      name: cleanName(selection.name),
      id: cleanName(selection.id),
    };

    if (selection.type === 'SECTION') {
      await handleDownloadSingleTestCase([...selection.children], meta);
    } else {
      await handleDownloadSingleTestCase([selection], meta);
    }
  }
}

function cleanName(name: string): string {
  return name
    .replaceAll('/', '-')
    .replaceAll('\\', '-')
    .replaceAll(':', '-')
    .replaceAll('|', '-')
    .replaceAll('<', '-')
    .replaceAll('>', '-')
    .replaceAll('*', '-')
    .replaceAll('?', '-');
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleGenerateAndDeserialize/deserialize.ts">
import { logger } from '../../code';

export const deserializeRawTree = async (
  rawTree: string,
): Promise<SceneNode[]> => {
  //TODO: copmare deserialized and serialized to see if there are any differences
  const obj = JSON.parse(rawTree);
  try {
    const deserialized = await deserializeCustomSceneNode(obj[0]);
    if (!deserialized) {
      throw new Error('NULL RETURNED');
    }
    return [deserialized];
  } catch (e: any) {
    logger.error(e.message);
    return Promise.reject(e);
  }
};
// --------------------------------- COPIED CODE ------------------------------------------- //

export const FONT_NAME_STYLES = [
  'Thin',
  'ExtraLight',
  'Light',
  'Regular',
  'Medium',
  'SemiBold',
  'Bold',
  'ExtraBold',
  'Black',
];

export const LAYOUT_MODE_NONE_PROPS = new Set([
  'primaryAxisSizingMode',
  'counterAxisSizingMode',
  'layoutWrap',
  'primaryAxisAlignItems',
  'counterAxisAlignItems',
  'counterAxisAlignContent',
  'paddingTop',
  'paddingBottom',
  'paddingLeft',
  'paddingRight',
  'itemSpacing',
  'counterAxisSpacing',
  'itemReverseZIndex',
  'strokesIncludedInLayout',
]);

export const SKIP_AUTO_PROPS = new Set([
  'type',
  'parent',
  'children',
  'removed',
  '_fonts',
  'autoRename',
  'overflowDirection',
  'width',
  'height',
  'absoluteTransform',
  'vectorPaths',
  'x',
  'y',
  'rotation',
  'scaleFactor',
  'mainComponent',
  'masterComponent',
  'backgrounds',
  'backgroundStyleId',
  'horizontalPadding',
  'verticalPadding',
  'fillGeometry',
  'strokeGeometry',
  'reactions', // gab added
]);
/**
 * Properties to skip deserializing for groups an boolean ops.
 */

export const SKIP_GROUP_PROPS = new Set([
  'relativeTransform',
  'x',
  'y',
  'rotation',
  'scaleFactor',
]);
/**
 * Properties to skip deserializing for nodes inside a component instance
 */

export const SKIP_IN_INSTANCE_PROPS = new Set([
  'relativeTransform',
  'x',
  'y',
  'rotation',
  'scaleFactor',
  'constraints',
  'vectorNetwork',
  'constrainProportions',
  'isMask',
  'numberOfFixedChildren',
  'booleanOperation',
]);

export const FACTORIES: { [key: string]: () => SceneNode } = {
  RECTANGLE: figma.createRectangle,
  LINE: figma.createLine,
  ELLIPSE: figma.createEllipse,
  POLYGON: figma.createPolygon,
  STAR: figma.createStar,
  VECTOR: figma.createVector,
  TEXT: figma.createText,
  FRAME: figma.createFrame,
  COMPONENT_SET: figma.createFrame,
  INSTANCE: figma.createFrame,
  COMPONENT: figma.createComponent,
  SLICE: figma.createSlice,
};
type BooleanOpFactory = typeof figma.exclude;

export const BOOLEAN_OP_FACTORIES: {
  [key: string]: BooleanOpFactory;
} = {
  UNION: figma.union,
  EXCLUDE: figma.exclude,
  INTERSECT: figma.intersect,
  SUBTRACT: figma.subtract,
};
/**
 * Parses out the main Node ID from a node ID. For nodes outside a component,
 * this is just the node ID. For nodes inside a component, this turns IDs like:
 *
 *     I4:1229;0:5435
 *
 * into:
 *
 *     0:5435
 */

export function mainNodeId(id: string): string {
  return id.replace(/^.*;/, '');
}
/**
 * Create a real Figma node from an object produced by `serializeNode`.
 *
 * @param obj A previously serialized node, i.e. something that `serializeNode` returned.
 * @returns A new node, or null if nothing could be deserialized.
 */

// export async function deserializeNode(obj: any): Promise<SceneNode | null> {
//   // Load all referenced fonts and import all referenced components in parallel
//   await Promise.all([
//     ...[...gatherFonts(obj)]
//       .map((f) => JSON.parse(f))
//       .map((font) => figma.loadFontAsync(font)),
//     ...[...gatherComponentKeys(obj)].map((key) =>
//       figma.importComponentByKeyAsync(key).catch(() => {}),
//     ),
//   ]);

//   // Actually deserialize
//   return await deserializeCustomSceneNode(obj);
// }
/**
 * Gather all fonts referenced in the given serialized object
 */
function gatherFonts(obj: any): Set<string> {
  const fonts = new Set<string>();

  if ('_fonts' in obj) {
    for (const f of obj._fonts.map((f: any) => JSON.stringify(f))) {
      fonts.add(f);
    }
  }

  if ('children' in obj) {
    for (const child of obj.children) {
      for (const f of gatherFonts(child)) {
        fonts.add(f);
      }
    }
  }

  return new Set(fonts);
}
/**
 * Gather all component keys referenced in the serialized object.
 */
function gatherComponentKeys(obj: any): Set<string> {
  const keys = new Set<string>();

  if ('_componentKey' in obj) {
    keys.add(obj._componentKey);
  }

  if ('children' in obj) {
    for (const child of obj.children) {
      for (const f of gatherComponentKeys(child)) {
        keys.add(f);
      }
    }
  }

  return keys;
}
// inner deserialization function, called recursively

export async function deserializeCustomSceneNode(
  //TODO: Strong types
  obj: any,
  parent?: SceneNode,
): Promise<SceneNode | null> {
  const { type } = obj;
  const factory = FACTORIES[type];

  if (factory !== undefined) {
    // most common node types
    const node: SceneNode = factory();
    setProperties(node, obj);
    if ('children' in node) {
      const children = await deserializeCustomSceneNodeChildren(obj);
      for (const c of children) {
        node.appendChild(c);
      }
    }
    return node;
  } else if (type === 'GROUP' || type === 'BOOLEAN_OPERATION') {
    // special handling for groups + booleans, which is currently very clumsy, inaccurate, and
    // slow
    const factory =
      type === 'BOOLEAN_OPERATION'
        ? BOOLEAN_OP_FACTORIES[(obj as any).booleanOperation]
        : figma.group;

    // the following approach produces more accurate results but 10x slower for some reason... here,
    // we start the group off with a throwaway node, and then append its actual children one by one,
    // and later remove the throwaway node.
    // let r = figma.createRectangle();
    // const node: GroupNode = factory([r], figma.currentPage);
    // for (let c of deserializedChildren) {
    //   node.appendChild(c);
    // }
    // r.remove();
    const node = factory(
      await deserializeCustomSceneNodeChildren(obj),
      figma.currentPage,
    );
    setProperties(node, obj);
    return node;
  } else if (type === 'INSTANCE') {
    // deserialize an instance node
    let mainComponent: ComponentNode;
    try {
      mainComponent = await figma.importComponentByKeyAsync(obj._componentKey);
    } catch (e) {
      logger.warn(`Couldn't instantiate an instance of ${obj._componentKey}`);
      return null;
    }

    const node: InstanceNode = mainComponent.createInstance();
    deserializeInstanceOverrides(obj, node, false);
    return node;
  } else {
    logger.warn(
      `Couldn't instantiate a node of type ${type}, ${JSON.stringify(obj)}`,
    );
    return null;
  }
}
/**
 * Loads all relevant fonts within the StyledTextSegments when there is more than 1 font used.
 * @param obj the object representing the node
 */

async function loadFontsFromStyledTextSegments(obj: any) {
  await Promise.all(
    obj.styledTextSegments.map((textSegment: any) =>
      figma.loadFontAsync(textSegment.fontName),
    ),
  );
}
/**
 * sets all the relevant StyledTextSegments. Figma as of now only has a getter method for StyledTextSegment, but does not expose a
 * setter method. The current workaround is to set the individual range properties.
 * Ref: https://www.figma.com/plugin-docs/api/properties/TextNode-getstyledtextsegments
 *
 * @param obj the array of StyledTextSegments
 * @param node TextNode to work on
 */
function setRangeTextSegments(obj: any[], node: TextNode) {
  obj.forEach((item) => {
    node.setRangeFontName(item.start, item.end, item.fontName);
    node.setRangeFontSize(item.start, item.end, item.fontSize);
    node.setRangeTextDecoration(item.start, item.end, item.textDecoration);
    if (item.hyperLink)
      node.setRangeHyperlink(item.start, item.end, item.hyperLink);
    node.setRangeLineHeight(item.start, item.end, item.lineHeight);
    node.setRangeLetterSpacing(item.start, item.end, item.letterSpacing);
    node.setRangeFills(item.start, item.end, item.fills);
  });
}
/**
 * Deserializes the given object's children in parallel
 */

async function deserializeCustomSceneNodeChildren(obj: any) {
  return (
    await Promise.all(
      (obj.children ?? []).map((c: any) => deserializeCustomSceneNode(c)),
    )
  ).filter((n) => Boolean(n));
}
/**
 * Deserializes overrides on a component instance, recursively.
 *
 * @param obj The serialized node
 * @param overrideNode The node (at the top-level, a component instances)
 * @param isRoot Whether or not `overrideNode` is the root instance, or if this is a node somewhere
 *     deeper in the instance's hierarchy.
 */

async function deserializeInstanceOverrides(
  obj: any,
  overrideNode: SceneNode,
  isRoot: boolean,
): Promise<void> {
  setProperties(overrideNode, obj, isRoot);
  if ('children' in overrideNode) {
    for (const child of obj.children ?? []) {
      const childNode = overrideNode.findChild(
        (n) => mainNodeId(n.id) === child.id,
      );
      if (childNode) {
        await deserializeInstanceOverrides(child, childNode, true);
      }
    }
  }
}
/**
 * Sets the actual properties on the given node from the given serialized object, e.g.
 * text, fill colors, etc.
 */

async function setProperties(node: SceneNode, obj: any, isInInstance = false) {
  let props = Object.entries<PropertyDescriptor>(
    Object.getOwnPropertyDescriptors(Object.getPrototypeOf(node)),
  )
    .filter(([name]) => !SKIP_AUTO_PROPS.has(name))
    .sort(sortPropsForSet);
  if (isInInstance) {
    props = props.filter(([name]) => !SKIP_IN_INSTANCE_PROPS.has(name));
  }
  if (obj.type === 'GROUP' || obj.type === 'BOOLEAN_OPERATION') {
    props = props.filter(([name]) => !SKIP_GROUP_PROPS.has(name));
  }
  //Gab: added
  if (obj.layoutMode === undefined || obj.layoutMode === 'NONE') {
    props = props.filter(([name]) => !LAYOUT_MODE_NONE_PROPS.has(name));
  }
  //Gab:added
  if (obj.type === 'TEXT' && obj.styledTextSegments !== undefined) {
    await loadFontsFromStyledTextSegments(obj);
  }

  for (const [name, prop] of props) {
    if (name in obj && prop.set) {
      // special case to avoid warnings around layoutAlign=CENTER being deprecated
      if (name === 'layoutAlign' && obj[name] === 'CENTER') {
        continue;
      }
      // Gab: added case
      if (name === 'componentPropertyReferences' && obj[name] === null) {
        continue;
      }
      // set the property on the node
      if (name === 'fontName') {
        await figma.loadFontAsync(obj[name]);
      }

      try {
        prop.set.call(node, obj[name]);
      } catch (e: any) {
        logger.error('Error thrown', e.message);
        logger.info('error was thrown for the key-pair: ', name, obj[name]);
      }
    }
  }

  //Gab:added
  if (obj.type === 'TEXT' && obj.styledTextSegments !== undefined) {
    setRangeTextSegments(obj.styledTextSegments, node as TextNode);
  }

  if (
    'resizeWithoutConstraints' in node &&
    obj.width !== undefined &&
    obj.height !== undefined &&
    obj.width > 1 &&
    obj.height > 1
  ) {
    node.resizeWithoutConstraints(obj.width, obj.height);
  }
}
const PRIORITIZE_PROPERTIES = new Set([
  'fontName',
  'layoutMode', //set layoutMode before any other layout settings
]);
/**
 * Property sort comparison method for {@link setProperties} that ensures certain properties
 * are set before others.
 */
function sortPropsForSet(
  a: [string, PropertyDescriptor],
  b: [string, PropertyDescriptor],
): number {
  if (PRIORITIZE_PROPERTIES.has(a[0])) return -1;
  if (PRIORITIZE_PROPERTIES.has(b[0])) return 1;
  return a[0].localeCompare(b[0]);
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleGenerateAndDeserialize/handleGenerateAndDeserialize.ts">
import { handleGetSelectedIds } from '../handleGetSelectedIds';
import { getSerializedFigmaNode } from '../getSerializedFigmaNode';
import { deserializeRawTree } from './deserialize';

export async function handleGenerateAndDeserialize() {
  const selectedNodes = handleGetSelectedIds();
  if (selectedNodes.length !== 1) {
    throw new Error('Select only one node to convert!');
  }

  const rawTree = await getSerializedFigmaNode();

  handleDeserialize(rawTree);
}

/**Converts a tree to scene nodes */
export async function handleDeserialize(serializedTree: {
  engineOne: null;
  engineTwo: string;
}) {
  const figmaNodes: SceneNode[] = await deserializeRawTree(
    serializedTree.engineTwo,
  );

  const newPage = figma.createPage();
  newPage.name = 'NEW PAGE';
  newPage.insertChild(0, figmaNodes[0]);
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleGenerateAndDeserialize/index.ts">
export * from './handleGenerateAndDeserialize';
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleGetBlockingNodes.ts">
import { getBlockingNodes } from '@firejet-sync/figma-plugin/helpers';

export function handleGetBlockingNodes() {
  const curSelection = figma.currentPage.selection;
  const blockingNodes = curSelection
    .flatMap(getBlockingNodes)
    .map((node) => ({ id: node.id, name: node.name }));
  return {
    blockingNodes,
    curSelection: curSelection.map((node) => ({
      id: node.id,
      name: node.name,
    })),
  };
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleGetSavedConfiguration.ts">
import { ConversionConfig, DEFAULT_CONFIG } from '@firejet-sync/shared/types';
import { updateSavedConfiguration } from './updateSavedConfiguration';
import { sendFrontend } from '../messaging';
import { getTailwindConfig } from './updateTailwindConfig';

export async function handleGetSavedConfiguration() {
  let savedConfiguration = (await figma.clientStorage.getAsync(
    'savedConfiguration',
  )) as ConversionConfig | undefined;

  savedConfiguration = { ...DEFAULT_CONFIG, ...(savedConfiguration ?? {}) };

  savedConfiguration.tailwindConfig = await getTailwindConfig();

  sendFrontend('savedConfiguration', savedConfiguration);
  return savedConfiguration;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleGetSelectedIds.ts">
export function handleGetSelectedIds() {
  return figma.currentPage.selection.map((node) => node.id);
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleGetUserSession.ts">
import { sendFrontend } from '../messaging';

export async function handleGetUserSession() {
  figma.clientStorage
    .getAsync('userSession')
    .then((session) => {
      sendFrontend('userSession', session);
    })
    .catch((err) => {});
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleGetUUID.ts">
import { generateUUID } from '@firejet-sync/shared/helpers';
import { sendFrontend } from '../messaging';

export async function handleGetUUID() {
  const uuid = await figma.clientStorage
    .getAsync('uniqueUserID')
    .then((uuid) => {
      if (!Boolean(uuid)) {
        uuid = generateUUID();
        figma.clientStorage.setAsync('uniqueUserID', uuid);
      }
      sendFrontend('uniqueUserID', uuid);

      return uuid as string;
    })
    .catch((err) => {
      return undefined;
    });

  return uuid;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleIncrementNumberOfConversions.ts">
import { sendFrontend } from '../messaging';

export async function handleIncrementNumberOfConversions() {
  let numberOfConversions = await figma.clientStorage.getAsync(
    'numberOfConversions',
  );

  numberOfConversions++;
  sendFrontend('numberOfConversions', {
    count: numberOfConversions,
  });
  figma.clientStorage.setAsync('numberOfConversions', numberOfConversions);
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleIncrementNumberOfLogins.ts">
import { sendFrontend } from '../messaging';

export async function handleIncrementNumberOfLogins() {
  let numberOfLogins = await figma.clientStorage.getAsync('numberOfLogins');
  if (numberOfLogins === undefined || Number.isNaN(numberOfLogins)) {
    numberOfLogins = 1;
  }
  const incrementedNumberOfLogins = numberOfLogins + 1;
  sendFrontend('numberOfLogins', numberOfLogins);
  figma.clientStorage
    .setAsync('numberOfLogins', incrementedNumberOfLogins)
    .catch((err) => {});
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleOpenCommand.ts">
import { sendFrontend } from '../messaging';

export function handleOpenCommand() {
  if (figma.command === 'convert') {
    sendFrontend('startConversion');
  }
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleResize.ts">
import { MIN_WINDOW_WIDTH, MIN_WINDOW_HEIGHT } from "../constants";

export function handleResize(data: { w: number; h: number }) {
  const restrictedSize = {
    w: Math.max(data.w, MIN_WINDOW_WIDTH),
    h: Math.max(data.h, MIN_WINDOW_HEIGHT),
  };

  figma.ui.resize(restrictedSize.w, restrictedSize.h);
  figma.clientStorage.setAsync("size", restrictedSize).catch((err) => {});
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleSaveImagesDict.ts">
import { create } from 'zustand';

type assetHash = string;
type assetURL = string;

const initialState = {
  assetMap: {} as Record<assetHash, assetURL>,
};

export type AssetStore = typeof initialState;

export const assetStore = create<AssetStore>((set, get) => initialState);

export async function handleSaveImagesDict(data: Record<string, string>) {
  assetStore.setState({ assetMap: data });
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleSelectTopLevelComponents.ts">
import { sendFrontend } from '../messaging';

export async function handleSelectTopLevelComponents() {
  const topLevelComponents: SceneNode[] = [];

  figma.currentPage.children.forEach((child) => {
    if (child.type !== 'COMPONENT' && child.type !== 'COMPONENT_SET') return;
    topLevelComponents.push(child);
  });

  figma.currentPage.selection = topLevelComponents;
  sendFrontend('topLevelComponentsSelected');
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleSetUserSession.ts">
import { Session } from '@supabase/supabase-js';

export async function handleSetUserSession(data: Session | null) {
  figma.clientStorage.setAsync('userSession', data).catch((err) => {});
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleUpdateDesignSystem.ts">
import { DesignLanguage, TailwindConfig } from '@firejet-sync/shared/types';
import { handleUpdateUIStyleManager } from './handleUpdateUIStyleManager';
import { updateDesignLanguage } from './updateDesignLanguage';
import { updateTailwindConfig } from './updateTailwindConfig';
import { handleGetSavedConfiguration } from './handleGetSavedConfiguration';

export async function handleUpdateDesignSystem(data: {
  designSystem: DesignLanguage;
  tailwindConfig: TailwindConfig;
}) {
  await updateDesignLanguage(data.designSystem);
  await updateTailwindConfig(data.tailwindConfig);
  await handleUpdateUIStyleManager();
  //Update the frontend
  await handleGetSavedConfiguration();
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleUpdateLastLoginDate.ts">
import { sendFrontend } from '../messaging';

export async function handleUpdateLastLoginDate(lastDateISOstring: string) {
  const lastLogin = await figma.clientStorage.getAsync('lastLogin');
  const newLogin = Date.parse(lastDateISOstring);
  sendFrontend('lastLogin', lastLogin);
  figma.clientStorage.setAsync('lastLogin', newLogin).catch((err) => {});
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleUpdateSavedConfiguration.ts">
import { ConversionConfig } from '@firejet-sync/shared/types';
import { updateSavedConfiguration } from './updateSavedConfiguration';

export function handleUpdateSavedConfiguration(data: ConversionConfig) {
  updateSavedConfiguration(data);
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/handleUpdateUIStyleManager.ts">
import { sendFrontend } from '../messaging';
import { getDesignSystem } from './getDesignSystem';

export async function handleUpdateUIStyleManager() {
  const designSystem = await getDesignSystem();
  sendFrontend('designSystem', designSystem);
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/init.ts">
import { getNumberOfConversions } from './getNumberOfConversions';
import { handleOpenCommand } from './handleOpenCommand';
import { handleUpdateUIStyleManager } from './handleUpdateUIStyleManager';
import { setRelaunchData } from './setRelaunchData';
import { updateFeatureFlags } from './updateFeatureFlags';
import { updateIsPluginDevMode } from './updateIsPluginDevMode';
import { updateNumAbsolute } from './updateNumAbsolute';
import { updateSelectedLayers } from './updateSelectedLayer';

export async function init() {
  updateSelectedLayers();
  handleUpdateUIStyleManager();
  setRelaunchData();
  handleOpenCommand();
  updateNumAbsolute();
  updateIsPluginDevMode();
  getNumberOfConversions();
  updateFeatureFlags();
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/promptDownload.ts">
import { sendFrontend } from '../messaging';

export function promptDownload(data: any) {
  sendFrontend('download', data);
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/setRelaunchData.ts">
export async function setRelaunchData() {
  figma.currentPage.setRelaunchData({ open: '' });
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/updateDesignLanguage.ts">
import { DesignLanguage } from '@firejet-sync/shared/types';

export async function updateDesignLanguage(designSystem: DesignLanguage) {
  return figma.clientStorage.setAsync('designSystem', designSystem);
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/updateFeatureFlags.ts">
import { FeatureFlags, flagChances } from '@firejet-sync/shared/constants';
import { sendFrontend } from '../messaging';

export async function updateFeatureFlags() {
  //TODO: Replace this function by hosting UI on seperate origin so that we can directly use posthog feature flags
  const curFlags = await figma.clientStorage.getAsync('featureFlags');
  const updatedFlags = generateFeatureFlags(curFlags ?? {});
  await figma.clientStorage.setAsync('featureFlags', updatedFlags);
  sendFrontend('featureFlags', updatedFlags);
}

function generateFeatureFlags(
  currentFlags: Partial<FeatureFlags> = {},
): FeatureFlags {
  const resultFlags: Partial<FeatureFlags> = { ...currentFlags };

  for (const flag in flagChances) {
    if (!(flag in currentFlags)) {
      const flagOptions = (flagChances as any)[flag];
      let cumulativeProbability = 0;
      const rand = Math.random();
      for (const value in flagOptions) {
        cumulativeProbability += flagOptions[value];
        if (rand <= cumulativeProbability) {
          (resultFlags as any)[flag] = value as keyof typeof flagOptions;
          break;
        }
      }
    }
  }

  // Type assertion to assert that the generated flags match the FeatureFlags type
  return resultFlags as FeatureFlags;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/updateIsPluginDevMode.ts">
import { sendFrontend } from '../messaging';

export function updateIsPluginDevMode() {
  if (figma.editorType !== 'dev') return;
  if (figma.mode === 'codegen') return;
  sendFrontend('isPluginDevMode');
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/updateNumAbsolute.ts">
import { sendFrontend } from '../messaging';
import { getDesignQualityStats } from './getDesignQualityStats';

export function updateNumAbsolute() {
  const designQuality = getDesignQualityStats(figma.currentPage.selection);

  sendFrontend('updateDesignQuality', designQuality);
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/updateSavedConfiguration.ts">
import { ConversionConfig } from '@firejet-sync/shared/types';

export async function updateSavedConfiguration(
  savedConfiguration: ConversionConfig,
) {
  await figma.clientStorage.setAsync('savedConfiguration', savedConfiguration);
  return;
}
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/updateTailwindConfig.ts">
import { TailwindConfig } from '@firejet-sync/shared/types';

export async function updateTailwindConfig(tailwindConfig: TailwindConfig) {
  return figma.clientStorage.setAsync('tailwindConfig', tailwindConfig);
}

export async function getTailwindConfig(): Promise<TailwindConfig | undefined> {
  return (await figma.clientStorage.getAsync('tailwindConfig')) ?? undefined;
}
</file>

<file path="packages/figmaplugincore/src/helpers/getFigmaNodeById.ts">
/**Use this function instead of the default getFigmaNodeById because figma has some weird internal edgecase with our custom ids */
export function getFigmaNodeById(id: string | undefined): BaseNode | null {
    if (id === undefined) return null;
    let relevantNode: BaseNode | null = null!;
  
    try {
      relevantNode = figma.getNodeById(id) as SceneNode;
    } catch {}
  
    return relevantNode;
  }
</file>

<file path="packages/figmaplugincore/src/messaging/index.ts">
export * from './messaging';
export * from './pluginCoreHandlers';
</file>

<file path="packages/figmaplugincore/src/routers/llm.ts">
import OpenAI from "openai";
import { publicProcedure, router } from "../trpc";
import { openai } from "../ai/llm";

export const aiRouter = router({
  chat: publicProcedure
    .input((val: unknown) => {
      if (!Array.isArray(val)) {
        throw new Error("Input must be an array of messages");
      }
      return val as OpenAI.ChatCompletionMessageParam[];
    })
    .mutation(async function* ({ input }) {
      console.log(input);
      try {
        const stream = await openai.chat.completions.create({
          model: "qwen-plus",
          messages: input,
          stream: true,
        });

        for await (const chunk of stream) {
          const content = chunk.choices[0]?.delta?.content || "";
          yield { content };
        }
      } catch (error) {
        console.error(`Error in chat stream: ${error}`);
        yield { error: `Failed to generate response: ${error}` };
      }
    }),
});
</file>

<file path="packages/figmaplugincore/src/trpc.ts">
import { initTRPC } from '@trpc/server';
 
/**
 * Initialization of tRPC backend
 * Should be done only once per backend!
 */
const t = initTRPC.create();
 
/**
 * Export reusable router and procedure helpers
 * that can be used throughout the router
 */
export const router = t.router;
export const publicProcedure = t.procedure;
</file>

<file path="packages/figmapluginui/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="packages/figmapluginui/Dockerfile">
FROM nginx:alpine
COPY packages/webapp/dist /usr/share/nginx/html
</file>

<file path="packages/figmapluginui/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="packages/figmapluginui/package.json">
{
  "name": "figmapluginui",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "//build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  }
}
</file>

<file path="packages/figmapluginui/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="packages/figmapluginui/README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="packages/figmapluginui/src/api/createEventListener.ts">
import { useEffect } from "react";

export function handleEvent<T = any>(
  eventType: string,
  handler: (data: T) => void,
  rejHandler?: (error: any) => void,
  reqId?: number
) {
  const controller = new AbortController();
  const signal = controller.signal;
  const handleResponseOnly = reqId !== undefined;

  const cleanup = () => {
    controller.abort();
  };
  /*eslint-disable no-restricted-globals*/
  addEventListener(
    "message",
    (e) => {
      if (e.data.pluginMessage === undefined) return;
      const { type, data, reqId: returnReqId, isErr } = e.data.pluginMessage;
      if (type !== eventType) return;
      if (reqId !== returnReqId && handleResponseOnly) return;
      if (isErr) {
        rejHandler?.(data);
      } else {
        handler(data);
      }
    },
    { signal }
  );

  return cleanup;
}

export function useEvent<T = any>(
  eventType: string,
  handler: (data: T) => void,
  dependencies?: Array<any>
) {
  useEffect(() => {
    const cleanup = handleEvent(eventType, handler);
    return cleanup;
  }, dependencies);
}
</file>

<file path="packages/figmapluginui/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="packages/figmapluginui/src/hooks/useDarkMode.tsx">
import { useState, useEffect } from "react";

export function useDarkMode() {
  const [isDarkMode, setIsDarkMode] = useState<boolean>(() => {
    const savedMode = localStorage.getItem("darkMode");
    return savedMode ? JSON.parse(savedMode) : false;
  });
  useEffect(() => {
    const root = window.document.documentElement;
    if (isDarkMode) {
      root.classList.add("dark");
      localStorage.setItem("darkMode", JSON.stringify(true));
    } else {
      root.classList.remove("dark");
      localStorage.setItem("darkMode", JSON.stringify(false));
    }
  }, [isDarkMode]);
  return { isDarkMode, setIsDarkMode };
}
</file>

<file path="packages/figmapluginui/src/llm/baseLlm.ts">
import { RawMessage } from "@types";

export abstract class LLM {
  protected maxTokens: number;

  constructor() {
    this.maxTokens = 4096;
  }

  abstract prompt(
    messages: RawMessage[],
    stopSequences: string[]
  ): AsyncIterable<string>;
}
</file>

<file path="packages/figmapluginui/src/llm/qwen.ts">
import { RawMessage } from "@types";
import { LLM } from "./baseLlm";
import { trpc } from "../trpc/trpc";

export class Qwen extends LLM {
  async *prompt(
    messages: RawMessage[],
    stopSequences: string[]
  ): AsyncIterable<string> {
    const stream = await trpc.ai.chat.mutate({ messages, stopSequences });
    for await (const chunk of stream) {
      if ("error" in chunk) break;
      yield chunk.content;
    }
  }
}
</file>

<file path="packages/figmapluginui/src/messages/BaseMessage.ts">
import { RawMessage } from "@types";

let idCounter = 0;
export abstract class BaseMessage {
  private _id: string;
  public contents = "";
  private _titles: string[] = [];
  abstract role: RawMessage["role"];
  abstract toRawMessages(): RawMessage[];

  constructor() {
    this._id = String(idCounter);
    idCounter += 1;
  }

  /** Add a title to your message with markdown headings */
  addTitle(title: string, contents: string) {
    const formattedTitle = `# ${title}\n${contents}`;
    this._titles.push(title);
    return formattedTitle;
  }

  get id() {
    return this._id;
  }

  get titles(): readonly string[] {
    return this._titles;
  }
}
</file>

<file path="packages/figmapluginui/src/messages/Messages.ts">
import { SystemPromptMessage } from './SystemPromptMessage';
import { ToolMessage } from './ToolMessage';

export type CustomMessage = ToolMessage | SystemPromptMessage;
</file>

<file path="packages/figmapluginui/src/messages/ToolMessage.ts">
import { RawMessage } from "@types";
import { BaseMessage } from "./BaseMessage";
import { TOOL_TEMPLATES, Tools, toolToToolString, ToolType } from "./tools";
import { makeObservable, observable, computed } from "mobx";

export const TOOL_START_MATCH_REGEX = /{TOOL (\w+)(?: (.*))?}/;
export const TOOL_END_MATCH_REGEX = /{END_TOOL\s?(\w*)}/;
export const THINKING_BLOCK_REGEX =
  /\n?{THINKING_START}\n([\s\S]*?)\n?{THINKING_END}/gm;

const logger = console;

export class ToolMessage<
  ToolName extends ToolType = ToolType
> extends BaseMessage {
  data: Partial<(typeof TOOL_TEMPLATES)[ToolName]["data"]> = {};
  get role(): "user" | "assistant" | "system" {
    return this.type ? TOOL_TEMPLATES[this.type].role : "assistant";
  }

  constructor(contents?: string) {
    super();
    makeObservable(this, {
      type: computed,
      role: computed,
      props: computed,
      contents: observable,
      body: computed,
      loading: computed,
    });
    this.contents = contents ?? "";
  }

  /**For type assertion */
  isType<T extends ToolType>(type: T): this is ToolMessage<T> {
    const curType = this.type;
    return (curType as any) === type;
  }

  get loading(): boolean {
    const ended = Boolean(this.contents.match(TOOL_END_MATCH_REGEX));
    return !ended;
  }

  //TODO: Memoize
  get type(): ToolName | undefined {
    const toolStartMatch = this.contents.match(TOOL_START_MATCH_REGEX);

    return (toolStartMatch?.[1] as ToolName) ?? undefined;
  }

  get props(): Tools[ToolName]["props"] {
    const toolStartMatch = this.contents.match(TOOL_START_MATCH_REGEX);
    if (toolStartMatch) {
      try {
        return JSON.parse(toolStartMatch[2]);
      } catch {
        logger.error("Unable to parse tool");
        return undefined;
      }
    }
    return undefined;
  }

  get body(): string {
    let bodyMatch = this.contents
      .replace(TOOL_START_MATCH_REGEX, "")
      .replace(TOOL_END_MATCH_REGEX, "")
      .replace(THINKING_BLOCK_REGEX, "");
    if (bodyMatch.startsWith("\n")) {
      bodyMatch = bodyMatch.substring(1);
    }
    if (bodyMatch.endsWith("\n")) {
      bodyMatch = bodyMatch.substring(0, bodyMatch.length - 1);
    }
    return bodyMatch;
  }

  set body(newBody: string) {
    if (!this.type) {
      throw new Error("Can't set for undefined type!");
    }
    this.contents = toolToToolString(this.type, {
      body: newBody,
      props: this.props,
    } as any);
  }

  get thoughts(): string | undefined {
    const thoughtMatches = this.contents.matchAll(THINKING_BLOCK_REGEX);
    const thoughts: string[] = [];
    for (const match of thoughtMatches) {
      thoughts.push(match[1].trim());
    }
    return thoughts.join("\n");
  }

  toRawMessages(): RawMessage[] {
    return [
      {
        role: this.role,
        content: this.contents,
      },
    ];
  }
}

export function createToolMessage<T extends ToolType>(
  toolName: T,
  toolData: Tools[T]
): ToolMessage {
  return new ToolMessage(toolToToolString(toolName, toolData));
}

export function isToolMessageType<T extends ToolType>(
  toolMessage: ToolMessage,
  type: T
): toolMessage is ToolMessage<T> {
  return toolMessage.type === type;
}
</file>

<file path="packages/figmapluginui/src/messages/tools/index.ts">
export * from './toolToLLMDescription';
export * from './toolTemplates';
</file>

<file path="packages/figmapluginui/src/messages/tools/toolTemplatesOld.tsx">
import {
  BotIcon,
  FileInputIcon,
  LucideProps,
  ShieldAlertIcon,
  UserIcon,
  WaypointsIcon,
} from "lucide-react";
import { ToolMessage } from "../ToolMessage";

export type MessageIcon = React.ForwardRefExoticComponent<
  Omit<LucideProps, "ref"> & React.RefAttributes<SVGSVGElement>
>;

export type ToolType = keyof typeof TOOL_TEMPLATES;

export type Tools = {
  [K in ToolType]: {
    body: (typeof TOOL_TEMPLATES)[K]["sampleBody"];
    props:
      | Record<keyof (typeof TOOL_TEMPLATES)[K]["propDesc"], string>
      | undefined;
  };
};

/**returns undefined or a string to pass back to llm to scold it to do better */
type ToolRuleResult = string | undefined;

//TODO: ToolRules need to be moved to render templates for type inference
/**Used to enforce certain formats for the LLM output and to hint it in the right direction if it messes up */
export interface ToolRule {
  /**Description passed to LLM regarding tool usage. */
  description: string;
  /**Checks to be done for the tool. Always just check the latest message, REGARDLESS of type*/
  check: (messagesWithoutErrors: ToolMessage[]) => ToolRuleResult;
}

export interface ToolTemplate {
  DISABLED?: true;
  role: "assistant" | "user";
  desc: string;
  sampleBody: string;
  propDesc: Record<string, string>;
  sampleProps: Record<string, string>;
  /**Used for storing additional data in a particular message, for example the contents at the time of parsing */
  data: object;
}

/**
 * Prompt Engineering Guidelines:
 * CoT - Ask LLM to explain thought process step by step for better outputs
 * Citations - By asking LLM for citation, we can run a bullshit detector using regex
 * Prefer positives - Instead of saying `DO NOT DO XXX`, which places a focus on XXX cos that's how attention models work, say `DO YYY`. Negatives are okay from time to time but if you can put both you might as well
 * Avoid controlling termination behaviour - the models can't control themselves if you ask them `STOP GENERATING AFTER YYY`. Use stop sequences instead, or if you use xml tags, with rules, they can recognise that as a reason to stop
 * Common terminology - Instead of using uncommon terminology like 'planning block' and 'fence blocks', stick to what is common for the LLM to have a better understanding of the rules, like 'thinking blocks' and 'xml tags'
 *
 * Prompt Engineering Ideas:
 * Switch from fence blocks to XML tags <taffythinking> for example
 * Make language positive instead of negative
 * Fail fallback to repeat prompt if output is not parsable
 * Rename planning block to thinking block
 * Add more files in folder to context automatically
 * Add diagnositcs to context automatically
 * Add typescript types to context automatically - To what depth?
 * Add token limit registrar to context adder
 * Explicitly state indentation for replace block flow
 * Fix assistant read file
 * Rule follower - make sure LLM output follows rules at every step otherwise restart prompting
 */

export const TOOL_TEMPLATES = {
  //ASSISTANT TOOLS
  ASSISTANT_INFO: {
    role: "assistant",
    desc: "For the assistant to write a response to the user. Every response to the user should start with an assistant info block.",
    propDesc: {},
    sampleProps: {},
    sampleBody:
      "To prevent .env files from being committed into the codebase, we need to update the .gitignore file.",
    data: {},
  },
  // ASSISTANT_PLANNING: {
  //   role: "assistant",
  //   desc: "For the assistant to plan how to tackle the task from the user. Reason how to tackle the user's task step by step, placing steps in a logical order. After the planning tool is done, execute the plan. In each step, indicate what tool you will use, and how you will use it",
  //   propDesc: {},
  //   sampleProps: {},
  //   sampleBody: `Example 1:
  //   1. Read the src/utils/index.ts and other relevant files to understand what files need to be updated
  //   2. Update the src/utils/helloWorld.ts file using ASSISTANT_REPLACE_BLOCK
  //   3. Update the barrel file src/utils/index.ts to include the export from helloWorld.ts using ASSISTANT_WRITE_FILE`,
  //   data: {},
  // },
  //   ASSISTANT_WRITE_FILE: {
  //     role: "assistant",
  //     desc: `Ask the user for permission to create/overwrite a file.  `,
  //     propDesc: {
  //       filePath:
  //         "The path to which the file is written. If the file path doesn't exist, directories will be recursively created until we are able to create the file.",
  //     },
  //     sampleProps: {
  //       filePath: "src/utils/helloWorld.ts",
  //     },
  //     sampleBody: `export function helloWorld() {
  //   ${"console"}.log("Hello World!");
  // }`,
  //     data: {},
  //   },
  //   ASSISTANT_REPLACE_BLOCK: {
  //     role: "assistant",
  //     desc: `A block from the assistant to address a user's focus block. The focus block will be the only part of the code programmatically replaced with the replace block, so make sure the outputs are immediately runnable. Instead of including comments in the output of the replace block, any parts of the thought process should be in the planning block or info block instead.`,
  //     propDesc: {
  //       filePath: "The file path where the contents are from",
  //     },
  //     sampleProps: {
  //       filePath: "src/utils/helloWorld.ts",
  //     },
  //     sampleBody: `  const name = 'Robert';`,
  //     data: {
  //       oldContents: undefined as string | undefined,
  //       newContents: undefined as string | undefined,
  //     },
  //   },
  //   ASSISTANT_FILE_SEARCH: {
  //     DISABLED: true, //TODO: Readd this in the future, right now the gitignore isn't being properly respected
  //     role: "assistant",
  //     desc: "Recursively search a directory for a particular regex. Use this tool when you need to understand the user's codebase at a wider scale, for example when you need to replace all instances of a function call with an updated function signature.",
  //     propDesc: {
  //       filePath: "The path in which you want to perform the search",
  //       search: "The regex you are searching for",
  //     },
  //     sampleProps: { filePath: "apps", search: "SUPABASE" },
  //     sampleBody: "",
  //     data: {},
  //   },
  //   ASSISTANT_READ_PATHS: {
  //     role: "assistant",
  //     desc: "Ask the user for permission to add certain paths to the context. The contents of the tool call should be all the paths that need to be read, seperated by newlines. After calling this tool, no other tool calls can be made by the assistant, as we have to wait for the user's response. This tool can be used to read file contents, read files available in a directory, and check if a path exists.",
  //     propDesc: {},
  //     sampleProps: {},
  //     sampleBody:
  //       "src/index.ts\nsrc/messages/helloWorld.ts\nsrc\nsrc/does-this-file-exist.ts",
  //     data: {},
  //   },

  //   //USER TOOLS
  //   USER_FILE_SEARCH_RESULT: {
  //     DISABLED: true, //TODO: Readd this in the future, right now the gitignore isn't being properly respected
  //     role: "user",
  //     desc: "The result from a regex search in a directory",
  //     propDesc: {
  //       filePath: "The path where the search was performed",
  //     },
  //     sampleProps: {
  //       filePath: "apps",
  //     },
  //     data: {},
  //     sampleBody: `Found 7 results.

  // apps/server/src/supabase.ts
  // │----
  // │const supabaseUrl = process.env.VITE_SUPABASE_URL;
  // │----
  // │
  // │const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;
  // │
  // │----

  // apps/frontend/src/utility/supabaseClient.ts
  // │----
  // │const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
  // │----
  // │const SUPABASE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;
  // │
  // │----
  // │if (!SUPABASE_URL || !SUPABASE_KEY) {
  // │  throw new Error('Missing Supabase URL or Key');
  // │export const supabaseClient = createClient<Database>(
  // │----
  // │  SUPABASE_URL,
  // │----
  // │  SUPABASE_KEY,
  // │  {
  // │----`,
  //   },
  USER_TOOL_ERROR: {
    role: "user",
    desc: "Information regarding incorrect tool usage. The occurence of this indicates a previous generation produced a result that did not follow a particular rule. Take extra notice of the rule that was not followed correctly in subsequent generations",
    propDesc: {},
    sampleProps: {},
    sampleBody:
      "We tried to write to a file without first reading the contents",
    data: {},
  },
  USER_PROMPT: {
    role: "user",
    desc: "The prompt from the user",
    propDesc: {},
    sampleProps: {},
    sampleBody: `Stop commiting .env files into the codebase`,
    data: {},
  },
  USER_FIGMA_NODE_CONTENTS: {
    role: "user",
    desc: "A JSON representing a node selected in figma.",
    propDesc: {
      nodeName: "The name of the node in figma",
      nodeId: "The id of the node in figma",
    },
    sampleProps: {
      nodeName: "Landing-Desktop",
      nodeId: "133:221",
    },
    sampleBody: `TODO`,
    data: {},
  },
  //   USER_FOCUS_BLOCK: {
  //     role: "user",
  //     desc: "A block from the user that specifies a particular section of the code that he has a question about, or he wants to replace. If only a question is asked, just reply the question in the info block. If the user wants the code to be edited, run through the info -> planning -> replace block flow. Make sure to match the original indendation of the line.",
  //     propDesc: {
  //       filePath: "The file path where the contents are from",
  //       startLine: "The start line of the specific area to focus on",
  //       endLine: "The end line of the specific area to focus on",
  //     },
  //     sampleProps: {
  //       filePath: "src/utils/helloWorld.ts",
  //       startLine: "2",
  //       endLine: "2",
  //     },
  //     sampleBody: `  const name = 'Thomas';`,
  //     data: {},
  //   },
  //   USER_AVAILABLE_FILES: {
  //     role: "user",
  //     desc: "Information from the user regarding available files in the repository",
  //     propDesc: {},
  //     sampleProps: {},
  //     sampleBody: "src/index.ts\nsrc/utils/anotherFile.ts",
  //     data: {},
  //   },
} satisfies Record<string, ToolTemplate>;

type ToolAction<ToolName extends ToolType> = (
  message: ToolMessage<ToolName>
) => void;

export type ToolActionMeta<ToolName extends ToolType> = {
  name: string;
  action: ToolAction<ToolName>;
  /**For a keyboard shortcut Ctrl+T, or Ctrl+1+T for an older
   * message for example, just put 't' as the shortcut - it
   * will be concatenated to the end */
  shortcutEnd: string;
};
export type ToolRenderTemplate<ToolName extends ToolType> = {
  Icon: MessageIcon;
  title: (message: ToolMessage<ToolName>) => React.ReactNode;
  body: (message: ToolMessage<ToolName>) => React.ReactNode;
  content: (message: ToolMessage<ToolName>) => string; // THIS IS FOR SHOWING MARKDOWN BUT ITS QUITE BUGGY. FIX AND USE THIS IN THE UI NEXT TIME
  onRemove?: ToolAction<ToolName>;
  onFocus?: ToolAction<ToolName>;
  actions?: ToolActionMeta<ToolName>[];
  rules: ToolRule[];
};
export const TOOL_RENDER_TEMPLATES: {
  [ToolName in ToolType]: ToolRenderTemplate<ToolName>;
} = {
  USER_PROMPT: {
    Icon: UserIcon,
    title: () => "You",
    body: (data) => data.body,
    content: (data) => data.contents,
    rules: [],
  },
  ASSISTANT_INFO: {
    Icon: BotIcon,
    title: () => "Taffy",
    body: (data) => data.body,
    content: (data) => data.contents,
    rules: [],
  },
  // USER_FILE_SEARCH_RESULT: {
  //   Icon: UserIcon,
  //   title: (msg) => `Search result for in ${msg.props?.filePath}`,
  //   body: (data) => {
  //     return data.body.split("\n")[0];
  //   },
  //   content: (data) => data.contents,
  //   rules: [],
  // },
  // ASSISTANT_PLANNING: {
  //   Icon: WaypointsIcon,
  //   title: () => "Taffy Planning",
  //   body: (data) => data.body,
  //   content: (data) => data.contents,
  //   rules: [
  //     {
  //       description:
  //         "Planning should only come immediately after an assistant info block",
  //       check: (messages) => {
  //         if (
  //           messages.at(-1)?.type === "ASSISTANT_PLANNING" &&
  //           messages.at(-2)?.type !== "ASSISTANT_INFO"
  //         ) {
  //           return (
  //             "The latest message is of type ASSISTANT_PLANNING but the previous message is of type " +
  //             messages.at(-2)?.type
  //           );
  //         }
  //         return undefined;
  //       },
  //     },
  //   ],
  // },
  // ASSISTANT_READ_PATHS: {
  //   Icon: BookPlusIcon,
  //   title: () => "Can I read these files?",
  //   body: (data) => data.body,
  //   content: (data) => data.contents,
  //   onRemove: (data) => {},
  //   rules: [],
  //   actions: [
  //     {
  //       name: "Approve",
  //       action: async (msg) => {
  //         const fileNames = msg.body.trim().split("\n");
  //         for (const fileName of fileNames) {
  //           await addAddtionalContext(fileName);
  //         }

  //         await continuePrompt(chatStore.get("mode"));
  //       },
  //       shortcutEnd: "enter",
  //     },
  //   ],
  // },

  // ASSISTANT_FILE_SEARCH: {
  //   Icon: BookPlusIcon,
  //   title: (msg) =>
  //     `Can I search "${msg.props?.filePath}" for "${msg.props?.search}"`,
  //   body: (data) => undefined,
  //   content: (data) => "",
  //   rules: [],
  //   actions: [
  //     {
  //       name: "Approve",
  //       action: async (msg) => {
  //         if (!msg.props) return;
  //         const searchResult =
  //           (await trpc.files.searchFilesContents.query({
  //             search: msg.props.search,
  //             relativeDir: msg.props.filePath,
  //           })) ?? "Search failed, please use alternative method";

  //         const searchResultMsg = new ToolMessage(
  //           toolToToolString("USER_FILE_SEARCH_RESULT", {
  //             body: searchResult,
  //             props: { filePath: msg.props.filePath },
  //           })
  //         );

  //         chatStore.set("messages", [
  //           ...chatStore.get("messages"),
  //           searchResultMsg,
  //         ]);

  //         await continuePrompt(chatStore.get("mode"));
  //       },
  //       shortcutEnd: "enter",
  //     },
  //   ],
  // },
  USER_TOOL_ERROR: {
    Icon: ShieldAlertIcon,
    title: () => "Tool error",
    body: (data) => data.body,
    content: (data) => data.contents,
    rules: [],
  },
  // USER_FOCUS_BLOCK: {
  //   Icon: FileInput,
  //   title: () => "File Context Added",
  //   rules: [],
  //   body: (data) => {
  //     if (!data.props) return;
  //     return (
  //       <p className="">
  //         {data.props.filePath} <br />
  //         Line {data.props.startLine} to Line {data.props.endLine}
  //       </p>
  //     );
  //   },
  //   content: (data) =>
  //     data.props?.filePath +
  //     "Line " +
  //     data.props?.startLine +
  //     " to Line " +
  //     data.props?.endLine,
  // },
  // ASSISTANT_REPLACE_BLOCK: {
  //   Icon: FilePlus2Icon,
  //   title: () => "Can I edit these files?",
  //   rules: [
  //     {
  //       description:
  //         "The file editing action after a USER_FOCUS_BLOCK must be an ASSISTANT_REPLACE_BLOCK. Other file editing actions like ASSISTANT_WRITE_FILE are not allowed.",
  //       check: (messages) => {
  //         const latestFocusBlock = findLatest(
  //           messages,
  //           (msg) => msg.type === "USER_FOCUS_BLOCK"
  //         );
  //         if (!latestFocusBlock) return undefined;
  //         const checkStartIdx = messages.indexOf(latestFocusBlock) + 1;
  //         for (let i = checkStartIdx; i < messages.length; i += 1) {
  //           const curMsg = messages[i];
  //           if (curMsg.role === "user") continue;
  //           if (curMsg.type === "ASSISTANT_WRITE_FILE") {
  //             return `We expected only legal actions after a USER_FOCUS_BLOCK, but instead found ${curMsg.type}`;
  //           }
  //           if (curMsg.type === "ASSISTANT_REPLACE_BLOCK") break;
  //         }
  //         return undefined;
  //       },
  //     },
  //     {
  //       description:
  //         "Each USER_FOCUS_BLOCK should have exactly one corresponding REPLACE_BLOCK, otherwise, use ASSISTANT_WRITE_FILE and overwrite the full file. ",
  //       check: (messages) => {
  //         //This looks like a double of the previous, but is required because sometimes when we are halfway generating the rule is not complete yet
  //         const latestReplaceBLock = findLatest(
  //           messages,
  //           (msg) => msg.type === "ASSISTANT_REPLACE_BLOCK"
  //         );
  //         if (!latestReplaceBLock) return undefined;
  //         const checkStartIdx = messages.indexOf(latestReplaceBLock) - 1;
  //         for (let i = checkStartIdx; i >= 0; i -= 1) {
  //           const curMsg = messages[i];
  //           if (curMsg.role === "user") continue;
  //           if (curMsg.type === "ASSISTANT_INFO") continue;
  //           if (curMsg.type === "ASSISTANT_PLANNING") continue;
  //           if (curMsg.type === "ASSISTANT_READ_PATHS") continue;
  //           if (curMsg.type === "ASSISTANT_REPLACE_BLOCK") break;
  //           return `We expected only legal actions after a USER_FOCUS_BLOCK, but instead found ${curMsg.type}`;
  //         }
  //         return undefined;
  //       },
  //     },
  //     {
  //       description:
  //         "Each USER_FOCUS_BLOCK should have exactly one corresponding REPLACE_BLOCK, otherwise, use ASSISTANT_WRITE_FILE and overwrite the full file. The filename of the replace block should match the preceding FOCUS_BLOCK",
  //       check: (messages) => {
  //         const latestMsg = messages.at(-1);
  //         if (!latestMsg?.isType("ASSISTANT_REPLACE_BLOCK")) {
  //           return undefined;
  //         }
  //         const checkStartIdx = messages.indexOf(latestMsg) - 1;
  //         let latestFocusBlock: ToolMessage<"USER_FOCUS_BLOCK"> | undefined;
  //         for (let i = checkStartIdx; i >= 0; i -= 1) {
  //           const curMsg = messages[i];
  //           if (curMsg.isType("ASSISTANT_REPLACE_BLOCK")) {
  //             return `Each replace block can only correspond to a single focus block, there are two replace blocks one after another! Use ASSISTANT_WRITE_FILE instead for the second one.`;
  //           }
  //           if (curMsg.isType("USER_FOCUS_BLOCK")) {
  //             latestFocusBlock = curMsg;
  //             break;
  //           }
  //         }
  //         if (!latestFocusBlock) {
  //           return "We can only run ASSISTANT_REPLACE_BLOCK when there is a preceding FOCUS_BLOCK, but there was none found!";
  //         }
  //         if (!latestFocusBlock?.isType("USER_FOCUS_BLOCK")) {
  //           throw new Error("Expected user focus block");
  //         }
  //         if (!latestMsg.props?.filePath) return undefined;
  //         if (!latestFocusBlock.props?.filePath) return undefined;
  //         if (latestMsg.props.filePath !== latestFocusBlock.props.filePath) {
  //           return `Expected replace block filePath to match latest focus block filePath ${latestFocusBlock.props.filePath} but instead got ${latestMsg.props.filePath}`;
  //         }
  //         return undefined;
  //       },
  //     },
  //     // {
  //     //   description:
  //     //     'Repeat the preceding 4 lines before the replace block, if any, matching the original indentation exactly. The preceding lines should be inside a {PRECEDING_START}\n{PRECEDING_END} block',
  //     //   check: () => undefined,
  //     // },
  //     // {
  //     //   description:
  //     //     'Start and end the new code to replace the existing focused code with a {REPLACE_START}\n{REPLACE_END} block',
  //     //   check: () => undefined,
  //     // },
  //     // {
  //     //   description:
  //     //     'End the block with a {SUCCEEDING_START}\n{SUCCEEDING_END} block, whose contents should be the 4 lines after the replace block, if any, matching the original indentation exactly.',
  //     //   check: () => undefined,
  //     // },
  //   ],
  //   body: (data) => {
  //     if (!data.props) return;
  //     const thoughtsString = data.thoughts ? `💡${data.thoughts}` : "";
  //     let fullStr = data.loading
  //       ? `${data.body.length} characters loaded so far`
  //       : "";
  //     if (thoughtsString) {
  //       fullStr += "\n\n" + thoughtsString;
  //     }

  //     return (
  //       <>
  //         <div>{data.props?.filePath} </div>
  //         {fullStr}
  //       </>
  //     );
  //   },
  //   content: (data) => {
  //     if (!data.props) return "";
  //     const thoughtsString = data.thoughts ? `💡${data.thoughts}` : "";
  //     let fullStr = data.loading
  //       ? `${data.body.length} characters loaded so far`
  //       : "";
  //     if (thoughtsString) {
  //       fullStr += "\n\n" + thoughtsString;
  //     }
  //     return data.props?.filePath + "\n" + fullStr;
  //   },

  //   onFocus: async (message) => {
  //     if (!message.props) return;
  //     const curContents = await getLatestFocusedContent();
  //     if (curContents?.props.filePath !== message.props.filePath) {
  //       // throw new Error("Mismatch file path for replace block")
  //       return;
  //     }
  //     message.data.oldContents = curContents.fullContents;
  //     const newContentsArr: string[] = [];
  //     if (curContents.preSelection) {
  //       newContentsArr.push(curContents.preSelection);
  //     }
  //     newContentsArr.push(message.body);
  //     if (curContents.postSelection) {
  //       newContentsArr.push(curContents.postSelection);
  //     }
  //     //We need to do it like above to prevent new line issues
  //     message.data.newContents = newContentsArr.join("\n");
  //     trpc.files.previewFileChange.mutate({
  //       fileName: message.props.filePath,
  //       newContents: message.data.newContents,
  //       id: message.id,
  //     });
  //   },
  //   onRemove: (message) => {
  //     if (!message.props) return;
  //     trpc.files.removeFileChange.mutate({
  //       id: message.id,
  //     });
  //   },
  //   actions: [
  //     {
  //       name: "Preview",
  //       action: (message) => {
  //         if (!message.props) return;
  //         if (!message.data.newContents) return;
  //         trpc.files.previewFileChange.mutate({
  //           fileName: message.props.filePath,
  //           newContents: message.data.newContents,
  //           id: message.id,
  //         });
  //       },
  //       shortcutEnd: "p",
  //     },
  //     {
  //       name: "Reject",
  //       action: (message) => {
  //         if (!message.props) return;
  //         trpc.files.removeFileChange.mutate({
  //           id: message.id,
  //         });
  //       },
  //       shortcutEnd: "enter",
  //     },
  //     {
  //       name: "Approve",
  //       action: (message) => {
  //         trpc.files.approveFileChange.mutate({ id: message.id });
  //       },
  //       shortcutEnd: "enter",
  //     },
  //   ],
  // },
  USER_FIGMA_NODE_CONTENTS: {
    Icon: FileInputIcon,
    title: () => "Figma Node Added",
    body: (data) => {
      if (!data.props) return;
      return data.props.nodeName;
    },
    content: (data) => data.props?.nodeName ?? "",
    rules: [],
  },
  // ASSISTANT_WRITE_FILE: {
  //   Icon: FilePlus2Icon,
  //   title: () => "Shall I update the following file?",
  //   rules: [
  //     {
  //       description:
  //         "You cannot write to a file until the file contents have been provided to you. Do not make assumptions about the contents of a file.",
  //       check: (messages) => {
  //         const latestMsg = messages.at(-1);
  //         if (!latestMsg?.isType("ASSISTANT_WRITE_FILE")) return undefined;
  //         if (!latestMsg.props) return undefined;
  //         const precedingFileContents = findLatest(messages, (msg) => {
  //           if (
  //             !msg.isType("USER_FOCUS_BLOCK") &&
  //             !msg.isType("USER_FILE_CONTENTS")
  //           ) {
  //             return false;
  //           }
  //           if (msg.props?.filePath !== latestMsg.props?.filePath) return false;
  //           return true;
  //         });
  //         if (!precedingFileContents) {
  //           return `You are trying to write to ${latestMsg.props.filePath}, but there is no such file in the context! Ask for permission to read the file first.`;
  //         }
  //         return undefined;
  //       },
  //     },
  //     {
  //       description:
  //         "You will need to provide the FULL FILE CONTENTS, because the action suggested to the user will be a full override of the existing file.",
  //       check: () => undefined,
  //     },
  //     // {
  //     //   description:
  //     //     'You cannot write to a file more than once until you obtain the updated contents of that file',
  //     //   check: () => undefined,
  //     // },
  //   ],
  //   body: (data) => {
  //     if (!data.props) return;
  //     const thoughtsString = data.thoughts ? `💡${data.thoughts}` : "";
  //     let fullStr = data.loading
  //       ? `${data.body.length} characters loaded so far`
  //       : "";
  //     if (thoughtsString) {
  //       fullStr += "\n\n" + thoughtsString;
  //     }

  //     return (
  //       <>
  //         <div>File Path - {data.props.filePath} </div>
  //         {fullStr}
  //       </>
  //     );
  //   },
  //   content: (data) => {
  //     if (!data.props) return "";
  //     const thoughtsString = data.thoughts ? `💡${data.thoughts}` : "";
  //     let fullStr = data.loading
  //       ? `${data.body.length} characters loaded so far`
  //       : "";
  //     if (thoughtsString) {
  //       fullStr += "\n\n" + thoughtsString;
  //     }
  //     return "File Path - " + data.props?.filePath + "\n" + fullStr;
  //   },
  //   onFocus: (message) => {
  //     if (!message.props) return;
  //     trpc.files.previewFileChange.mutate({
  //       fileName: message.props.filePath,
  //       newContents: message.body,
  //       id: message.id,
  //     });
  //   },
  //   onRemove: (message) => {
  //     if (!message.props) return;
  //     trpc.files.removeFileChange.mutate({
  //       id: message.id,
  //     });
  //   },
  //   actions: [
  //     {
  //       name: "Preview",
  //       action: (message) => {
  //         if (!message.props) return;
  //         trpc.files.previewFileChange.mutate({
  //           fileName: message.props.filePath,
  //           newContents: message.body,
  //           id: message.id,
  //         });
  //       },
  //       shortcutEnd: "p",
  //     },
  //     {
  //       name: "Reject",
  //       action: (message) => {
  //         if (!message.props) return;
  //         trpc.files.removeFileChange.mutate({
  //           id: message.id,
  //         });
  //       },
  //       shortcutEnd: "enter",
  //     },
  //     {
  //       name: "Approve",
  //       action: (message) => {
  //         trpc.files.approveFileChange.mutate({ id: message.id });
  //       },
  //       shortcutEnd: "enter",
  //     },
  //   ],
  // },
  // USER_AVAILABLE_FILES: {
  //   Icon: FilePlus2Icon,
  //   title: () => "Available Files in Repository",
  //   rules: [],
  //   body: (data) => {
  //     const numFiles = data.body.split("\n").length;
  //     return `${numFiles} filenames added to context`;
  //   },
  //   content: (data) => {
  //     const numFiles = data.body.split("\n").length;
  //     return `${numFiles} filenames added to context`;
  //   },
  // },
};

// //I'm not sure about the thinking start version
// ASSISTANT_WRITE_FILE: {
//   role: 'assistant',
//   desc: `Ask the user for permission to create/overwrite a file. You will need to provide the FULL FILE CONTENTS, because the action suggested to the user will be a full override of the existing file. Stopping generation before reaching the end of the file will result in a confusing output to the end user after the result is parsed. DO NOT INCLUDE LINE NUMBERS IN THE OUTPUT. Before tackling a challenging part of the code, you can walk yourself through the coding process in a THINKING block

// {THINKING_START}
// In order to write this function, I will need to...
// {THINKING_END}

// The thinking blocks will not be included in the outputted code.
// Within the thinking blocks, consider the user's existing code style and practices and follow those.
// DO NOT WRITE CODE WITHIN THE THINKING BLOCKS. The thinking blocks are soley meant for planning. Any code will need to be written outside the thinking block, in order to be included in the final suggestion to the user.

// Do not generate comments in the generated code, unless the user explicitly asks for it. Use thinking blocks instead if absolutely necessary.
// `,
//   propDesc: {
//     filePath:
//       "The path to which the file is written. If the file path doesn't exist, directories will be recursively created until we are able to create the file.",
//   },
//   sampleProps: {
//     filePath: 'src/utils/helloWorld.ts',
//   },
//   sampleBody: `export function helloWorld() {
// {THINKING_START}
// The hello world function should log hello world.
// {THINKING_END}
// ${'console'}.log("Hello World!");
// }`,
// },
</file>

<file path="packages/figmapluginui/src/messages/tools/toolToLLMDescription.ts">
import {
  TOOL_RENDER_TEMPLATES,
  Tools,
  ToolTemplate,
  ToolType,
} from "./toolTemplates";

export function toolToLLMDescription<T extends ToolType>(
  toolName: T,
  tool: ToolTemplate
): string {
  const propDescStr = Object.keys(tool.propDesc)
    .map((key) => `${key} - ${tool.propDesc[key]}`)
    .join("\n");

  const sampleTool: Tools[T] = {
    props: tool.sampleProps as Record<keyof typeof tool.sampleProps, string>,
  } as any;

  if (tool.sampleBody) {
    sampleTool.body = tool.sampleBody;
  }

  const toolRules = TOOL_RENDER_TEMPLATES[toolName].rules;

  const additionalRules =
    toolRules.length > 0
      ? toolRules
          .map((rule, idx) => `${idx + 1}. ${rule.description}`)
          .join("\n")
      : "There are no rules for this tool.";

  return `Name: ${toolName}
Description:
${tool.desc}
Props:
${propDescStr}
Tool Rules:
${additionalRules}
Sample:
${toolToToolString(toolName, sampleTool)}`;
}

interface ToolToToolStringOpts {
  excludeEnd: boolean;
}

export function toolToToolString<T extends ToolType>(
  toolName: T,
  tool: Tools[T],
  opts?: ToolToToolStringOpts
): string {
  const propsStr = JSON.stringify(tool.props);

  let result = getToolStartString(toolName, propsStr);

  if (tool.body !== undefined) {
    result += "\n" + tool.body;
  }

  if (!opts?.excludeEnd) {
    result += "\n" + getToolEndString(toolName);
  }
  return result;
}

export function getToolStartString<T extends ToolType>(
  toolName: T,
  propsStr: string
): string {
  if (
    propsStr &&
    JSON.parse(propsStr) &&
    Object.keys(JSON.parse(propsStr)).length > 0
  ) {
    return `{TOOL ${toolName} ${propsStr}}`;
  } else {
    return `{TOOL ${toolName}}`;
  }
}

export function getToolEndString<T extends ToolType>(toolName: T): string {
  return `{END_TOOL ${toolName}}`;
}
</file>

<file path="packages/figmapluginui/src/stores/selectedLayerStore.ts">
import { createStore } from "@shared";
import type { updateSelectedLayers } from "@figmaplugincore-types/handlerFuncs/updateSelectedLayer";
import { handleEvent } from "../api/createEventListener";
import { sendMidEnd } from "../api/sendMidEnd";

export const selectedLayerStore = createStore({
  layers: [] as Awaited<ReturnType<typeof updateSelectedLayers>>,
});

handleEvent("updateSelectedLayers", (layers) => {
  selectedLayerStore.set("layers", layers);
});

sendMidEnd("updateSelectedLayers");
</file>

<file path="packages/figmapluginui/src/trpc/trpc.ts">
import { createTRPCClient, httpBatchStreamLink } from "@trpc/client";
import type { AppRouter } from "@backend";
//     👆 **type-only** import
// Pass AppRouter as generic here. 👇 This lets the `trpc` object know
// what procedures are available on the server and their input/output types.
export const trpc = createTRPCClient<AppRouter>({
  links: [
    httpBatchStreamLink({
      url: "http://localhost:3000",
    }),
  ],
});
</file>

<file path="packages/figmapluginui/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="packages/figmapluginui/tsconfig.app.json">
{
  "extends": "../../tsconfig.app.json",
  "include": ["src"]
}
</file>

<file path="packages/figmapluginui/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="packages/shadcn/src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="packages/shadcn/src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="packages/shadcn/src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="packages/shadcn/src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="packages/shadcn/src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="packages/shadcn/src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="packages/shadcn/src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="packages/shadcn/src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="packages/shadcn/src/components/ui/combobox.tsx">
import * as React from "react";
import { Check, ChevronsUpDown } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "./popover";

const frameworks = [
  {
    value: "next.js",
    label: "Next.js",
  },
  {
    value: "sveltekit",
    label: "SvelteKit",
  },
  {
    value: "nuxt.js",
    label: "Nuxt.js",
  },
  {
    value: "remix",
    label: "Remix",
  },
  {
    value: "astro",
    label: "Astro",
  },
];

export function ComboboxDemo() {
  const [open, setOpen] = React.useState(false);
  const [value, setValue] = React.useState("");

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-[200px] justify-between"
        >
          {value
            ? frameworks.find((framework) => framework.value === value)?.label
            : "Select framework..."}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[200px] p-0">
        <Command>
          <CommandInput placeholder="Search framework..." />
          <CommandList>
            <CommandEmpty>No framework found.</CommandEmpty>
            <CommandGroup>
              {frameworks.map((framework) => (
                <CommandItem
                  key={framework.value}
                  value={framework.value}
                  onSelect={(currentValue: any) => {
                    setValue(currentValue === value ? "" : currentValue);
                    setOpen(false);
                  }}
                >
                  <Check
                    className={cn(
                      "mr-2 h-4 w-4",
                      value === framework.value ? "opacity-100" : "opacity-0"
                    )}
                  />
                  {framework.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}
</file>

<file path="packages/shadcn/src/components/ui/command.tsx">
import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { Command as CommandPrimitive } from "cmdk";
import { Search } from "lucide-react";

import { cn } from "@/lib/utils";
import { Dialog, DialogContent } from "./dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};
</file>

<file path="packages/shadcn/src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="packages/shadcn/src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="packages/shadcn/src/components/ui/drawer.tsx">
import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@/lib/utils";

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};
</file>

<file path="packages/shadcn/src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="packages/shadcn/src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="packages/shadcn/src/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="packages/shadcn/src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="packages/shadcn/src/components/ui/pagination.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";
import { ButtonProps, buttonVariants } from "./button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
};
</file>

<file path="packages/shadcn/src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
</file>

<file path="packages/shadcn/src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="packages/shadcn/src/components/ui/radio-group.tsx">
import * as React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };
</file>

<file path="packages/shadcn/src/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };
</file>

<file path="packages/shadcn/src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="packages/shadcn/src/components/ui/select.tsx">
import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
</file>

<file path="packages/shadcn/src/components/ui/seperator.tsx">
import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };
</file>

<file path="packages/shadcn/src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="packages/shadcn/src/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="packages/shadcn/src/components/ui/switch.tsx">
import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };
</file>

<file path="packages/shadcn/src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="packages/shadcn/src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="packages/shadcn/src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="packages/shadcn/src/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "./toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="packages/shadcn/src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="packages/shadcn/src/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="packages/shadcn/src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="packages/shadcn/tsconfig.json">
{
  "extends": "../../tsconfig.app.json",
  "include": ["src"]
}
</file>

<file path="packages/shared/src/createStore.ts">
import { create } from "zustand";
import { persist, subscribeWithSelector } from "zustand/middleware";

export function createStore<T extends Record<string, any>>(
  storeDefaults: T,
  opts?: { persistKey?: string }
) {
  let creator = subscribeWithSelector<T>((set, get) => storeDefaults);
  if (opts?.persistKey) {
    creator = persist(creator, { name: opts.persistKey }) as any;
  }
  const useStore = create<T>()(creator);
  const use = <K extends keyof T, V extends T[K]>(key: K) =>
    useStore((state) => state[key]) as V;
  const set = <K extends keyof T, V extends T[K]>(key: K, val: V) => {
    useStore.setState({ [key]: val } as Partial<T>);
  };
  const get = <K extends keyof T, V extends T[K]>(key: K) =>
    useStore.getState()[key] as V;
  const subscribe = <K extends keyof T, V extends T[K]>(
    key: K,
    listener: (newVal: V, oldVal: V) => void
  ) => useStore.subscribe((state) => state[key], listener);

  return { use, set, get, subscribe, useStore };
}
</file>

<file path="packages/shared/src/findLatest.ts">
export function findLatest<T>(
  arr: T[],
  predicate: (value: T) => boolean
): T | undefined {
  for (let i = arr.length - 1; i >= 0; i--) {
    if (predicate(arr[i])) {
      return arr[i];
    }
  }
  return undefined;
}
</file>

<file path="packages/shared/src/traverse.ts">
export function traverse<T extends { children?: T[] }>(
  root: T,
  cb: (curNode: T) => void
) {
  cb(root);
  root.children?.forEach((child) => traverse(child, cb));
}
</file>

<file path="packages/shared/tsconfig.json">
{
  "extends": "../../tsconfig.base.json",
  "include": ["src"]
}
</file>

<file path="packages/types/src/rawMessages.ts">
export type RawMessage =
  | { role: 'user'; content: string }
  | { role: 'assistant'; content: string }
  | { role: 'system'; content: string };
</file>

<file path="packages/types/src/supabaseTypes.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  graphql_public: {
    Tables: {
      [_ in never]: never
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      graphql: {
        Args: {
          operationName?: string
          query?: string
          variables?: Json
          extensions?: Json
        }
        Returns: Json
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
  public: {
    Tables: {
      [_ in never]: never
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DefaultSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  graphql_public: {
    Enums: {},
  },
  public: {
    Enums: {},
  },
} as const
</file>

<file path="packages/types/tsconfig.json">
{
    "extends": "../../tsconfig.base.json",
    "include": ["src"]
  }
</file>

<file path="packages/webapp/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="packages/webapp/Dockerfile">
FROM nginx:alpine
COPY packages/webapp/dist /usr/share/nginx/html
</file>

<file path="packages/webapp/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="packages/webapp/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="packages/webapp/package.json">
{
  "name": "webapp",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "//build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  }
}
</file>

<file path="packages/webapp/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="packages/webapp/README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="packages/webapp/src/App.tsx">
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Moon, Send, Sun } from "lucide-react";
import { useEffect, useRef, useState } from "react";
import { trpc } from "./trpc/trpc";
import OpenAI from "openai";
import { Switch } from "@/components/ui/switch";
import toast from "react-hot-toast";

type Message = OpenAI.ChatCompletionMessageParam;
type MessageWithID = { id: string; content: string } & Message;

export default function App() {
  const [messages, setMessages] = useState<MessageWithID[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const [isDarkMode, setIsDarkMode] = useState<boolean>(() => {
    const savedMode = localStorage.getItem("darkMode");
    return savedMode ? JSON.parse(savedMode) : false;
  });

  useEffect(() => {
    if (isDarkMode) {
      toast.success("Switched to dark mode!");
    } else {
      toast.success("Switched to light mode!");
    }
  }, [isDarkMode]);

  useEffect(() => {
    const root = window.document.documentElement;
    if (isDarkMode) {
      root.classList.add("dark");
      localStorage.setItem("darkMode", JSON.stringify(true));
    } else {
      root.classList.remove("dark");
      localStorage.setItem("darkMode", JSON.stringify(false));
    }
  }, [isDarkMode]);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    // Add user message
    const userMessage: MessageWithID = {
      id: Date.now().toString(),
      role: "user" as const,
      content: input.trim(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    try {
      // Prepare messages for API
      const apiMessages: Message[] = [
        { role: "system", content: "You are a helpful assistant." },
        ...messages,
        { role: userMessage.role, content: userMessage.content },
      ];

      // Create a temporary message for streaming
      const assistantMessageId = (Date.now() + 1).toString();
      setMessages((prev) => [
        ...prev,
        { id: assistantMessageId, role: "assistant", content: "" },
      ]);

      // Stream the response
      const stream = await trpc.ai.chat.mutate(apiMessages);
      let fullContent = "";

      for await (const chunk of stream) {
        if ("error" in chunk) {
          console.error(chunk.error);
          setMessages((prev) =>
            prev.map((msg) =>
              msg.id === assistantMessageId
                ? { ...msg, content: "Error: Failed to generate response." }
                : msg
            )
          );
          break;
        } else {
          fullContent += chunk.content;
          setMessages((prev) =>
            prev.map((msg) =>
              msg.id === assistantMessageId
                ? { ...msg, content: fullContent }
                : msg
            )
          );
        }
      }
    } catch (error) {
      console.error("Error sending message:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-muted p-4 place-items-center relative">
      <div className="absolute top-5 right-5">
        <div className="flex items-center space-x-2">
          <Switch
            id="dark-mode-switch"
            checked={isDarkMode}
            onCheckedChange={setIsDarkMode}
          />
          {isDarkMode ? <Moon size={20} /> : <Sun size={19} />}
        </div>
      </div>
      <Card className="w-full max-w-2xl h-[80vh] flex flex-col">
        <CardHeader className="border-b flex flex-row justify-between items-center">
          <CardTitle>AI Chatbot</CardTitle>
        </CardHeader>

        <CardContent
          className={`flex-1 m-1 p-4 space-y-4 ${
            messages.length > 0 && "overflow-y-auto"
          }`}
        >
          {messages.length === 0 ? (
            <div className="flex items-center justify-center h-full text-gray-500">
              Send a message to start the conversation
            </div>
          ) : (
            messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${
                  message.role === "user" ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`max-w-[80%] rounded-lg px-4 py-2 ${
                    message.role === "user"
                      ? "bg-primary text-primary-foreground"
                      : message.role === "system"
                      ? "bg-gray-300 text-gray-800 dark:bg-gray-700 dark:text-gray-200"
                      : "bg-muted dark:bg-muted/50"
                  }`}
                >
                  {message.content}
                </div>
              </div>
            ))
          )}
          <div ref={messagesEndRef} />
        </CardContent>

        <CardFooter className="border-t p-4">
          <form onSubmit={handleSubmit} className="flex w-full gap-2">
            <Input
              value={input}
              onChange={handleInputChange}
              placeholder="Type your message..."
              className="flex-1"
              disabled={isLoading}
            />
            <Button type="submit" size="icon" disabled={isLoading}>
              <Send className="h-4 w-4" />
            </Button>
          </form>
        </CardFooter>
      </Card>
    </div>
  );
}
</file>

<file path="packages/webapp/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="packages/webapp/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import '@/styles/globals.css'
import App from './App.tsx'
import { Toaster } from 'react-hot-toast';


createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <Toaster
      toastOptions={{
        style: {
          background: 'var(--background)',
          color: 'var(--foreground)',
          border: '1px solid var(--border)',
        },
      }}
    />
    <App />
  </StrictMode>,
)
</file>

<file path="packages/webapp/src/trpc/trpc.ts">
import { createTRPCClient, httpBatchStreamLink } from "@trpc/client";
import type { AppRouter } from "@backend";
//     👆 **type-only** import
// Pass AppRouter as generic here. 👇 This lets the `trpc` object know
// what procedures are available on the server and their input/output types.
export const trpc = createTRPCClient<AppRouter>({
  links: [
    httpBatchStreamLink({
      url: "http://localhost:3000",
    }),
  ],
});
</file>

<file path="packages/webapp/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="packages/webapp/tsconfig.app.json">
{
  "extends": "../../tsconfig.app.json",
  "include": ["src"]
}
</file>

<file path="packages/webapp/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="packages/webapp/vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";
import appRoot from "app-root-path";
import path from "path";

// https://vite.dev/config/
export default defineConfig({
  plugins: [tailwindcss(), react()],
  envDir: appRoot.path,
  resolve: {
    alias: {
      "@": path.resolve(appRoot.path, "packages/shadcn/src"),
    },
  },
});
</file>

<file path="README.md">
# firejet-hackathon-template
 A template for use during hackathons and starting projects quickly

TODO:
1. Routing
2. Auth
3. Hosting
</file>

<file path="supabase/.gitignore">
# Supabase
.branches
.temp

# dotenvx
.env.keys
.env.local
.env.*.local
</file>

<file path="supabase/config.toml">
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "firejet-hackathon-template"

[api]
enabled = true
# Port to use for the API URL.
port = 11321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 11322
# Port used by db diff command to initialize the shadow database.
shadow_port = 11320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 11329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

# [db.vault]
# secret_key = "env(SECRET_VALUE)"

[db.migrations]
# Specifies an ordered list of schema files that describe your database.
# Supports glob patterns relative to supabase directory: "./schemas/*.sql"
schema_paths = []

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 11323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 11324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 11325
# pop3_port = 11326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.rate_limit]
# Number of emails that can be sent per hour. Requires auth.email.smtp to be enabled.
email_sent = 2
# Number of SMS messages that can be sent per hour. Requires auth.sms to be enabled.
sms_sent = 30
# Number of anonymous sign-ins that can be made per hour per IP address. Requires enable_anonymous_sign_ins = true.
anonymous_users = 30
# Number of sessions that can be refreshed in a 5 minute interval per IP address.
token_refresh = 150
# Number of sign up and sign-in requests that can be made in a 5 minute interval per IP address (excludes anonymous users).
sign_in_sign_ups = 30
# Number of OTP / Magic link verifications that can be made in a 5 minute interval per IP address.
token_verifications = 30

# Configure one of the supported captcha providers: `hcaptcha`, `turnstile`.
# [auth.captcha]
# enabled = true
# provider = "hcaptcha"
# secret = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152121111 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

# Use Clerk as a third-party provider alongside Supabase Auth.
[auth.third_party.clerk]
enabled = false
# Obtain from https://clerk.com/setup/supabase
# domain = "example.clerk.accounts.dev"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083
# The Deno major version to use.
deno_version = 1

# [edge_runtime.secrets]
# secret_key = "env(SECRET_VALUE)"

[analytics]
enabled = false
port = 11327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"
</file>

<file path="test.js">
// Function to fetch and print contents and headers from localhost:4200
async function fetchAndPrintLocalhost() {
  try {
    console.log('Fetching from localhost:4200...');
    
    const response = await fetch('http://localhost:4200');
    
    // Print response status
    console.log('Status:', response.status, response.statusText);
    
    // Print headers
    console.log('Headers:');
    response.headers.forEach((value, name) => {
      console.log(`  ${name}: ${value}`);
    });
    
    // Get and print content
    const content = await response.text();
    console.log('Content:');
    console.log(content);
    
    return { status: response.status, headers: Object.fromEntries(response.headers), content };
  } catch (error) {
    console.error('Error fetching from localhost:4200:', error);
    return { error: error.message };
  }
}

// Execute the function
fetchAndPrintLocalhost();
</file>

<file path="tsconfig.app.json">
{
    "extends": "./tsconfig.base.json",
    "compilerOptions": {
      "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
      "target": "ES2020",
      "useDefineForClassFields": true,
      "lib": ["ES2020", "DOM", "DOM.Iterable"],
      "module": "ESNext",
      "skipLibCheck": true,
  
      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "isolatedModules": true,
      "moduleDetection": "force",
      "noEmit": true,
      "jsx": "react-jsx",
  
      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true,
      "noUncheckedSideEffectImports": true
    },
  }
</file>

<file path="tsconfig.json">
{
  "extends": "./tsconfig.base.json"
}
</file>

<file path="packages/figmaplugincore/src/handleFuncsEditFigma/handleChangeColor.ts">
/**
 * Handles changing the color of a Figma node
 * @param nodeId The ID of the node to change color
 * @param r Red component (0-1)
 * @param g Green component (0-1)
 * @param b Blue component (0-1)
 * @param a Alpha component (0-1)
 * @returns Promise that resolves when the color change is complete
 */
export async function handleChangeColor(data: {
  nodeId: string;
  r: string;
  g: string;
  b: string;
  a: string;
}): Promise<void> {
  const { nodeId, r, g, b, a } = data;
  const rValue = parseFloat(r);
  const gValue = parseFloat(g);
  const bValue = parseFloat(b);
  const aValue = parseFloat(a);
  // Get the node by ID
  const node = await figma.getNodeByIdAsync(nodeId);

  if (!node) {
    console.error(`Node with ID ${nodeId} not found`);
    return;
  }

  // Apply color based on node type
  if ("fills" in node && Array.isArray(node.fills)) {
    // For shapes, frames, etc. that have fills
    node.fills = [
      {
        type: "SOLID",
        color: { r: rValue, g: gValue, b: bValue },
        opacity: aValue,
      },
    ];
  } else {
    console.error("NO FILLS FOUND WHAT", node);
  }
}
</file>

<file path="packages/figmaplugincore/src/index.ts">
import { updateSelectedLayers } from "./handlerFuncs/updateSelectedLayer";
import { startPluginHandlers } from "./messaging";

startPluginHandlers();

figma.showUI(__html__, { width: 800, height: 600 });

figma.on("selectionchange", () => {
  updateSelectedLayers();
});
</file>

<file path="packages/figmapluginui/eslint.config.js">
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);
</file>

<file path="packages/figmapluginui/src/main.tsx">
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "@/styles/globals.css";
import App from "./App.tsx";
import { Toaster } from 'react-hot-toast';

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <Toaster
      toastOptions={{
        style: {
          background: "var(--background)",
          color: "var(--foreground)",
          border: "1px solid var(--border)",
        },
      }}
    />
    <App />
  </StrictMode>
);
</file>

<file path="packages/figmapluginui/src/messages/SystemPromptMessage.ts">
import { RawMessage } from "@types";
import { BaseMessage } from "./BaseMessage";
import { TOOL_TEMPLATES, toolToLLMDescription } from "./tools";

export class SystemPromptMessage extends BaseMessage {
  role: "user" | "assistant" | "system" = "system";
  prompt: string;

  constructor() {
    super();
    this.prompt = [
      this.addTitle("PERSONA", this.getPersona()),
      this.addTitle("TOOL TUTORIAL", this.getToolTutorial()),
    ].join("\n\n");
  }

  getPersona(): string {
    return `You are an senior uiux designer. Keep your answers concise. If the user asks for changes to be made to their design, the changes NEED to be in the appropriate tool blocks so their design can be updated. DO NOT use backticks AT ALL.`;
  }

  getToolTutorial(): string {
    return [
      `There are several tools available to you to use where necessary.

CRITICAL RULES - MUST BE FOLLOWED AT ALL TIMES:

1. The entire conversation should be in tools. This is very important because the UI the user sees is parsed from tool blocks, so the formatting must be correct.
2. You are ONLY allowed to use tools labelled 'assistant'. The other tools are for the user to respond to your query.
3. Strictly follow the tool formats an examples. Take note of where there are spaces, and where there are underscores.

Below are the tools available to you and instructions on how to use them.`,
      ...Object.entries(TOOL_TEMPLATES)
        .filter(([_, template]) => !("DISABLED" in template))
        .map(([toolName, toolTemplate]) =>
          toolToLLMDescription(toolName as any, toolTemplate)
        ),
    ].join("\n\n");
  }

  toRawMessages(): RawMessage[] {
    return [
      {
        role: "system",
        content: this.prompt,
      },
    ];
  }
}
</file>

<file path="packages/figmapluginui/tailwind.config.ts">
import path from "path";
import appRoot from "app-root-path";

export default {
  content: [
    path.join(appRoot.path, "packages/**/*.{js,ts,jsx,tsx}"),
    // or relative paths like:
    // "../../packages/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
</file>

<file path="packages/figmapluginui/tsconfig.node.json">
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="packages/figmapluginui/vite.config.ts">
// import { defineConfig } from "vite";
// import react from "@vitejs/plugin-react";
// import tailwindcss from "@tailwindcss/vite";
// import appRoot from "app-root-path";
// import path from "path";

// // https://vite.dev/config/
// export default defineConfig({
//   plugins: [tailwindcss(), react()],
//   envDir: appRoot.path,
//   resolve: {
//     alias: {
//       "@": path.resolve(appRoot.path, "packages/shadcn/src"),
//     },
//   },
// });

import tailwindcss from "@tailwindcss/vite";
import react from "@vitejs/plugin-react";
import { defineConfig, Plugin, UserConfig } from "vite";
import requireTransform from "vite-plugin-require-transform";
import { viteSingleFile } from "vite-plugin-singlefile";
import fs from "fs/promises";
import { nodePolyfills } from "vite-plugin-node-polyfills";
import path from "path";
import checker from "vite-plugin-checker";
import { fileURLToPath } from "url";
import appRoot from "app-root-path";
import dotenv from "dotenv";

const CUR_DIR = path.dirname(fileURLToPath(import.meta.url));
const ROOT_DIR = appRoot.path;
// Load environment variables from .env file
dotenv.config({ path: path.resolve(ROOT_DIR, ".env") });

const DEFINED_PROCESS_ENVS = Object.fromEntries(
  Object.entries({ ...process.env })
    .filter(([key, _]) => key.startsWith("VITE"))
    .flatMap(([key, val]) => {
      return [[`process.env.${key}`, JSON.stringify(val)]];
    })
);

const indexHtmlSpoofPlugin = (): Plugin => {
  let config: UserConfig;
  const getOutDirPath = (config: UserConfig, pathName: string) => {
    const relativeOutDir = config.build?.outDir;
    const rootDir = config.root;
    if (!rootDir) {
      throw new Error("MISSING_ROOT_DIR");
    }
    if (!relativeOutDir) {
      throw new Error("MISSING_OUTPUT_DIR");
    }
    const outDir = path.resolve(rootDir, relativeOutDir);
    const indexOutputPath = path.resolve(outDir, pathName);
    return { outDir, indexOutputPath };
  };

  const writeFile = async (
    path: string,
    contents: string,
    config: UserConfig
  ) => {
    const { outDir, indexOutputPath } = getOutDirPath(config, path);
    await fs.mkdir(outDir, { recursive: true });
    await fs.writeFile(indexOutputPath, contents);
  };

  return {
    name: "index-html-spoof-plugin",
    configResolved: async (resolvedConfig) => {
      config = resolvedConfig as any;
      const nonNullOriginSpoof = `<script>
          window.location.href = "${process.env.VITE_PLUGIN_URL}"
        </script>
        `;
      await writeFile("index-spoof.html", nonNullOriginSpoof, config);
      // await writeFile(
      //   "../deploy-manifest.json",
      //   JSON.stringify(DEPLOY_MANIFEST, undefined, 2),
      //   config
      // );
    },
    transformIndexHtml: {
      order: "post",
      handler(html) {
        return html;
      },
    },
    buildStart: () => {
      const attemptFetch = () => {
        //We need to try this fetch to do the inital file population
        fetch(process.env.NX_PLUGIN_URL!)
          .then((response) => {
            if (!response.ok) {
              setTimeout(attemptFetch, 200);
            }
          })
          .catch((error) => {
            setTimeout(attemptFetch, 200);
          });
      };

      attemptFetch();
    },
  };
};

async function hardRefreshPlugin() {
  const manifestLocation = path.join(ROOT_DIR, "manifest.json");
  const manifest = await fs.readFile(manifestLocation);
  //Temporary disable because it seems to be constantly refreshing the plugin incorrectly
  // await fs.writeFile(manifestLocation, manifest);
}

const handleHardRefreshPlugin = (): Plugin => {
  return {
    name: "hard-refresh-plugin",
    configureServer(server) {
      const noop = () => {};
      server.watcher.on("change", (file) => {
        if (file.includes("nodebox")) {
          hardRefreshPlugin();
        }
      });
      server.hot.addChannel({
        name: "handle-full-reload",
        send: (data: any) => {
          const fullReloadTypes = ["full-reload", "error"];
          if (!fullReloadTypes.includes(data.type)) return;
          hardRefreshPlugin();
        },
        on: noop,
        off: noop,
        listen: noop,
        close: noop,
      });
    },
  };
};

// const IGNORE_PACKAGES = [
//   "ai",
//   "ai-2",
//   "backend",
//   "backend-helpers",
//   "cli",
//   "contenx",
//   "nx-firejet",
//   "scrape-aidata",
//   "uied",
//   "engine-two/autofixer-deterministic",
//   "engine-two/scene-node-to-code-meta",
//   "engine-two/snapshot-comparison",
//   "engine-two/tests",
// ];
// const IGNORE_GLOBS = IGNORE_PACKAGES.map((pkg) => `**/packages/${pkg}/**`);

// // FIXME: for some reason just setting IGNORE_GLOBS on watch.ignored is not working
// const unwatchNonPluginFiles = (): Plugin => {
//   return {
//     name: "unwatch-non-plugin-files",
//     configureServer(server) {
//       // Ensure that the watcher unwatch the specific files or directories
//       server.watcher.unwatch(IGNORE_GLOBS);
//     },
//   };
// };

const finalConfig = defineConfig(({ command }) => {
  return {
    root: CUR_DIR,
    cacheDir: "../../../node_modules/.vite/packages/figma-plugin/ui",
    base: process.env.VITE_PLUGIN_URL,
    server: {
      port: process.env.VITE_PLUGIN_LOCAL_DEV_PORT,
      host: "localhost",
      warmup: {
        clientFiles: ["./src/App.tsx"],
      },
      // watch: {
      //   ignored: IGNORE_GLOBS,
      // },
    },
    define: { ...DEFINED_PROCESS_ENVS },
    resolve: {
      alias: {
        "@": path.resolve(appRoot.path, "packages/shadcn/src"),
        "@shared": path.resolve(appRoot.path, "packages/shared/src"),
      },
    },
    plugins: [
      nodePolyfills({
        include: ["path", "buffer", "crypto", "vm", "os", "assert", "util"],
      }),
      react(),
      requireTransform(),
      // command === "serve" &&
      //   checker({
      //     overlay: {
      //       position: "tr",
      //       panelStyle: `
      // 	left: 1rem;
      // 	bottom: 1rem;
      // 	width: calc(100vw - 2rem);
      // 	max-height: 90vh;
      // 	height: auto;
      // 	border-radius: 10px;
      // 	background: #450a0a55;
      //   backdrop-filter: blur(8px);
      // }`,
      //     },
      //     root: CUR_DIR,
      //     typescript: {
      //       tsconfigPath: "./tsconfig.app.json",
      //     },
      //   }),
      tailwindcss(),
      indexHtmlSpoofPlugin(),
      handleHardRefreshPlugin(),
      viteSingleFile(),
      // unwatchNonPluginFiles(),
    ],

    // Uncomment this if you are using workers.
    // worker: {
    //  plugins: [ nxViteTsPaths() ],
    // },
    build: {
      outDir: "./dist",
      minify: false,
      reportCompressedSize: true,
      rollupOptions: {
        output: {
          entryFileNames: `assets/[name].js`,
          chunkFileNames: `assets/[name].js`,
          assetFileNames: `assets/[name].[ext]`,
        },
      },
      commonjsOptions: {
        transformMixedEsModules: true,
      },
    },
  };
});

export default finalConfig;
</file>

<file path="packages/shadcn/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 cursor-pointer",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="packages/shadcn/src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-xs transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="packages/shared/src/supabase.ts">
// import { createClient } from "@supabase/supabase-js";
// import { Database } from "@types";

// if (!process.env.VITE_SUPABASE_URL || !process.env.VITE_SUPABASE_ANON_KEY) {
//   throw Error("MISSING_SUPABASE_KEYS");
// }

// export const supabase = createClient<Database>(
//   process.env.VITE_SUPABASE_URL,
//   process.env.VITE_SUPABASE_ANON_KEY
// );
</file>

<file path="packages/types/src/index.ts">
export * from "./supabaseTypes";
export * from "./rawMessages";
</file>

<file path="packages/webapp/tailwind.config.ts">
import path from "path";
import appRoot from "app-root-path";

export default {
  content: [
    path.join(appRoot.path, "packages/**/*.{js,ts,jsx,tsx}"),
    // or relative paths like:
    // "../../packages/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
</file>

<file path="packages/webapp/tsconfig.node.json">
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="packages/backend/src/routers/llm.ts">
import OpenAI from "openai";
import { publicProcedure, router } from "../trpc";
import { openai } from "../ai/llm";

export const aiRouter = router({
  chat: publicProcedure
    .input((data: unknown) => {
      return data as {
        messages: OpenAI.ChatCompletionMessageParam[];
        stopSequences: string[];
      };
    })
    .mutation(async function* ({ input }) {
      console.log(input);
      try {
        const stream = await openai.chat.completions.create({
          model: "qwen-plus",
          messages: input.messages,
          stop: input.stopSequences,
          stream: true,
        });

        for await (const chunk of stream) {
          const content = chunk.choices[0]?.delta?.content || "";
          process.stdout.write(content);
          yield { content };
        }
      } catch (error) {
        console.error(`Error in chat stream: ${error}`);
        yield { error: `Failed to generate response: ${error}` };
      }
    }),
});
</file>

<file path="packages/figmaplugincore/esbuild.config.mjs">
import * as esbuild from "esbuild";
import { spawn } from "child_process";
import dotenv from "dotenv";
import appRoot from "app-root-path";
import { fileURLToPath } from "url";
import path, { dirname } from "path";

// __filename equivalent
const __filename = fileURLToPath(import.meta.url);

// __dirname equivalent
const __dirname = dirname(__filename);

const env = dotenv.config({
  path: path.resolve(appRoot.path, ".env"),
});

const DEFINED_PROCESS_ENVS = {};

Object.entries(env.parsed ?? {}).forEach(([key, val]) => {
  DEFINED_PROCESS_ENVS[`process.env.${key}`] = JSON.stringify(val);
});

const runAfterBuildPlugin = {
  name: "run-after-build",
  setup(build) {
    build.onEnd(() => {
      console.log("Build complete!");
    });
  },
};

const buildOptions = {
  entryPoints: ["src/index.ts"],
  bundle: true,
  platform: "browser",
  target: ["es2016"],
  format: "cjs",
  outfile: "dist/main.cjs",
  define: DEFINED_PROCESS_ENVS,
  plugins: [runAfterBuildPlugin],
  inject: [path.resolve(__dirname, "./esbuild/globalShims.js")],
};

const command = process.argv[2];

if (command === "dev") {
  const ctx = await esbuild.context({
    ...buildOptions,
  });
  await ctx.watch();
  console.log("Watching for changes...");
} else if (command === "build") {
  await esbuild.build({
    ...buildOptions,
    minify: true,
  });
  console.log("Build completed successfully!");
} else {
  console.error("Please specify either 'dev' or 'build' command");
  process.exit(1);
}
</file>

<file path="packages/figmaplugincore/src/messaging/messaging.ts">
import { PluginCoreHandlers, pluginCoreHandlers } from "./pluginCoreHandlers";

interface Message<K = string> {
  type: K;
  data: any;
  reqId: number;
}

export function startPluginHandlers() {
  figma.ui.onmessage = async <K extends keyof PluginCoreHandlers>(
    msg: Message<K>
  ) => {
    //This condition is because we are using the enterprise API
    //See https://www.firejet.io/docs/enterprise/api-documentation#things-to-note
    if ("firejetMessage" in msg) return;
    let result: any;
    let isErr = false;
    try {
      result = await pluginCoreHandlers[msg.type](msg.data);
    } catch (e) {
      result = e;
      isErr = true;
      console.error(e);
    }
    sendFrontend(msg.type, result, msg.reqId, isErr);
  };
}

export function handleEventOnce(type: string, handler: (data: any) => void) {
  const listener = (msg: Message) => {
    if (msg.type !== type) return;
    handler(msg.data);
    figma.ui.off("message", listener);
  };

  figma.ui.on("message", listener);
}

export function sendFrontend(
  type: string,
  data?: any,
  reqId?: number,
  isErr?: boolean
) {
  const payload: Record<string, any> = {
    type,
  };

  if (data !== undefined) {
    payload.data = data;
  }

  if (reqId !== undefined) {
    payload.reqId = reqId;
  }

  if (isErr) {
    payload.isErr = true;
  } else {
    payload.isErr = false;
  }

  figma.ui.postMessage(payload);
}
</file>

<file path="packages/shadcn/src/components/ui/badge.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };
</file>

<file path="packages/shadcn/src/styles/globals.css">
@import "tailwindcss" source("../../..");
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --radius: 0.4rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.705 0.213 47.604);
  --primary-foreground: oklch(0.98 0.016 73.684);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.213 47.604);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.705 0.213 47.604);
  --sidebar-primary-foreground: oklch(0.98 0.016 73.684);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.705 0.213 47.604);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.646 0.222 41.116);
  --primary-foreground: oklch(0.98 0.016 73.684);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.646 0.222 41.116);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.646 0.222 41.116);
  --sidebar-primary-foreground: oklch(0.98 0.016 73.684);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.646 0.222 41.116);
}


@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }

  /* Custom Scrollbar Styles */
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  ::-webkit-scrollbar-track {
    @apply bg-transparent;
    border-radius: var(--radius-lg);
  }

  ::-webkit-scrollbar-thumb {
    @apply bg-muted-foreground/20;
    border-radius: var(--radius-lg);
  }

  ::-webkit-scrollbar-thumb:hover {
    @apply bg-ring;
  }
}
</file>

<file path="packages/shared/src/index.ts">
export * from "./createStore";
// export * from "./supabase";
export * from "./findLatest";
export * from "./traverse";
</file>

<file path="tsconfig.base.json">
{
  "compilerOptions": {
    "typeRoots": ["./node_modules/@types", "./node_modules/@figma"],
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "Node",
    "baseUrl": ".",
    "paths": {
      "@backend": ["packages/backend/src/index"],
      "@shared": ["packages/shared/src/index"],
      "@types": ["packages/types/src/index"],
      "@figmaplugincore-types/*": ["packages/figmaplugincore/src/*"],
      "@/*": ["packages/shadcn/src/*"]
    },
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "noUnusedLocals": false
  },
  "exclude": ["node_modules", "dist"]
}
</file>

<file path="package.json">
{
  "name": "firejet-hackathon-template",
  "version": "1.0.0",
  "description": "A template for use during hackathons and starting projects quickly",
  "main": "index.js",
  "scripts": {
    "dev:webapp": "npm run --workspace=webapp dev",
    "dev:backend": "npm run --workspace=backend dev",
    "dev:figmapluginui": "npm run --workspace=figmapluginui dev",
    "dev:figmaplugincore": "npm run --workspace=figmaplugincore dev",
    "dev": "concurrently -c=auto npm:dev:backend npm:dev:figmaplugincore npm:dev:figmapluginui",
    "build:webapp": "npm run --workspace=webapp build",
    "build:backend": "npm run --workspace=backend build",
    "build:figmapluginui": "npm run --workspace=figmapluginui build",
    "build:figmaplugincore": "npm run --workspace=figmaplugincore build",
    "build": "concurrently -c=auto npm:build:*",
    "supabase:start": "npx supabase start",
    "supabase:stop": "npx supabase stop",
    "supabase:types": "npx supabase gen types typescript --local > packages/types/src/supabaseTypes.ts"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@figma/plugin-typings": "^1.109.0",
    "@radix-ui/react-accordion": "^1.2.4",
    "@radix-ui/react-alert-dialog": "^1.1.7",
    "@radix-ui/react-aspect-ratio": "^1.1.3",
    "@radix-ui/react-avatar": "^1.1.4",
    "@radix-ui/react-checkbox": "^1.1.5",
    "@radix-ui/react-context-menu": "^2.2.7",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-dropdown-menu": "^2.1.7",
    "@radix-ui/react-label": "^2.1.3",
    "@radix-ui/react-menubar": "^1.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.6",
    "@radix-ui/react-popover": "^1.1.7",
    "@radix-ui/react-progress": "^1.1.3",
    "@radix-ui/react-radio-group": "^1.2.4",
    "@radix-ui/react-scroll-area": "^1.2.4",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slider": "^1.2.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.1.4",
    "@radix-ui/react-tabs": "^1.1.4",
    "@radix-ui/react-toggle": "^1.1.3",
    "@radix-ui/react-toggle-group": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.2.0",
    "@supabase/supabase-js": "^2.49.4",
    "@tailwindcss/vite": "^4.1.3",
    "@trpc/client": "^11.0.4",
    "@trpc/server": "^11.0.4",
    "app-root-path": "^3.1.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "concurrently": "^9.1.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "embla-carousel-react": "^8.6.0",
    "lucide-react": "^0.487.0",
    "mobx": "^6.13.7",
    "openai": "^4.93.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hot-toast": "^2.5.2",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^2.1.7",
    "remark-gfm": "^4.0.1",
    "tailwind-merge": "^3.2.0",
    "tailwindcss": "^4.1.3",
    "tw-animate-css": "^1.2.5",
    "vaul": "^1.1.2",
    "vite-plugin-checker": "^0.9.1",
    "vite-plugin-node-polyfills": "^0.23.0",
    "vite-plugin-require-transform": "^1.0.21",
    "vite-plugin-singlefile": "^2.2.0",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/cors": "^2.8.17",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "supabase": "^2.20.12",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  },
  "workspaces": [
    "./packages/*"
  ]
}
</file>

<file path="packages/figmaplugincore/src/messaging/pluginCoreHandlers.ts">
import { handleChangeColor } from "@figmaplugincore-types/handleFuncsEditFigma/handleChangeColor";
import { runFocusNode } from "../handlerFuncs/focusNode";
import {
  getFullDesignImageFromSelectedFrame,
  getImageFromSelectedFrame,
} from "../handlerFuncs/getImageFromSelectedFrame";
import { handleGetSelectedIds } from "../handlerFuncs/handleGetSelectedIds";
import { handleResize } from "../handlerFuncs/handleResize";
import {
  getSelectedLayersFull,
  updateSelectedLayers,
} from "@figmaplugincore-types/handlerFuncs/updateSelectedLayer";

export type PluginCoreHandlers = typeof pluginCoreHandlers;

export const pluginCoreHandlers = {
  resize: handleResize,
  getImageFromSelectedFrame,
  getFullDesignImageFromSelectedFrame,
  getSelectedIds: handleGetSelectedIds,
  focusNode: runFocusNode,
  updateSelectedLayers,
  getSelectedLayersFull,
  //FIGMA EDITING
  handleChangeColor,
} satisfies Record<string, (...args: any[]) => any>;
</file>

<file path="packages/figmapluginui/src/api/sendMidEnd.ts">
import type { PluginCoreHandlers } from "@figmaplugincore-types/messaging/pluginCoreHandlers";
import { handleEvent } from "./createEventListener";

// type PluginCoreHandlers = any;

let reqId = 0;

export function makeDropDataPopulater(
  dropEventName: string,
  dropEventData: object
) {
  return (e: React.DragEvent<Element> | undefined) => {
    e?.dataTransfer.setData(
      `fj_drop/${dropEventName}`,
      JSON.stringify(dropEventData)
    );
  };
}

export async function sendMidEnd<
  Type extends keyof PluginCoreHandlers,
  Data extends Parameters<PluginCoreHandlers[Type]>
>(type: Type, ...data: Data) {
  reqId += 1;

  parent.postMessage(
    {
      pluginMessage: {
        type,
        data: data[0],
        reqId,
      },
      //TODO: Should probably not hard code this but I think it won't change
      pluginId: "1492040236290118921",
    },
    "*"
  );

  let res: (data: any /*ReturnType<PluginCoreHandlers[Type]>*/) => void;
  let rej; //TODO: Handle rejections, just like in real life

  const result = new Promise<ReturnType<PluginCoreHandlers[Type]>>(
    (resolve, reject) => {
      res = resolve;
      rej = reject;
    }
  );

  const cleanup = handleEvent(
    type as string,
    (data) => {
      cleanup();
      res(data);
    },
    rej,
    reqId
  );

  return result;
}

// import { handleEvent } from './create-event-listener';

// let reqId = 0;

// export async function sendMidEnd<
//   Type extends keyof PluginCoreHandlers,
//   Data extends Parameters<PluginCoreHandlers[Type]>
// >(type: Type, ...params: Data) {
//   reqId += 1;

//   parent.postMessage(
//     {
//       pluginMessage: {
//         type,
//         data: params[0],
//         reqId,
//       },
//     },
//     '*'
//   );

//   let res: (data: ReturnType<PluginCoreHandlers[Type]>) => void;
//   let rej; //TODO: Handle rejections, just like in real life

//   const result = new Promise<ReturnType<PluginCoreHandlers[Type]>>(
//     (resolve, reject) => {
//       res = resolve;
//       rej = reject;
//     }
//   );

//   const cleanup = handleEvent(
//     type,
//     (data) => {
//       cleanup();
//       res(data);
//     },
//     reqId
//   );

//   return result;
// }
</file>

<file path="packages/figmapluginui/src/features/SelectionDisplay.tsx">
import { useState } from "react";
import { useEvent } from "../api/createEventListener";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import { selectedLayerStore } from "../stores/selectedLayerStore";

const MAX_BADGES_DISPLAYED_INITIAL = 7;

export function SelectionDisplay() {
  const selectedLayers = selectedLayerStore.use("layers");
  // const [selectedLayers, setSelectedLayers] = useState<any[]>([]);
  const [isExpanded, setIsExpanded] = useState(false);

  // useEvent("updateSelectedLayers", (layers) => {
  //   setSelectedLayers(layers);
  //   if (layers.length <= MAX_BADGES_DISPLAYED_INITIAL) {
  //       setIsExpanded(false);
  //   }
  // });

  const displayLayers = isExpanded
    ? selectedLayers
    : selectedLayers.slice(0, MAX_BADGES_DISPLAYED_INITIAL);

  const showToggleButton = selectedLayers.length > MAX_BADGES_DISPLAYED_INITIAL;

  if (selectedLayers.length === 0) {
    return null;
  }

  return (
    <TooltipProvider>
      <div
        className={cn(
          "flex flex-row flex-wrap items-center gap-1 bg-transparent p-4 pb-0 transition-all duration-300 ease-in-out",
          isExpanded ? "max-h-40 overflow-y-auto" : "overflow-hidden"
        )}
      >
        {displayLayers.map((layer) => (
          <Tooltip key={layer.id}>
            <TooltipTrigger asChild>
              <Badge
                variant="secondary"
                className="max-w-24 flex-shrink-0 cursor-default"
              >
                <span className="truncate overflow-hidden w-full block">
                  {layer.name}
                </span>
              </Badge>
            </TooltipTrigger>
            <TooltipContent>
              <p>
                {layer.page} / {layer.name}
              </p>
            </TooltipContent>
          </Tooltip>
        ))}
        {showToggleButton && (
          <Button
            variant="link"
            size="sm"
            className="text-xs h-auto p-0 ml-1 flex-shrink-0"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? "Show less" : `View all (${selectedLayers.length})`}
          </Button>
        )}
      </div>
    </TooltipProvider>
  );
}
</file>

<file path="packages/figmapluginui/src/messages/LLMOutputParser.ts">
import {
  chatStore,
  CompletionMode,
  getToolMessagesWithoutErrors,
} from "../stores/chatStore";
import {
  TOOL_END_MATCH_REGEX,
  TOOL_START_MATCH_REGEX,
  ToolMessage,
} from "./ToolMessage";
import {
  TOOL_RENDER_TEMPLATES,
  TOOL_TEMPLATES,
  toolToToolString,
  ToolType,
} from "./tools";

export class LLMOutputParser {
  earlyExit = false;
  async handleTextStream(stream: AsyncIterable<string>, mode: CompletionMode) {
    let curLine = "";
    for await (const textChunk of stream) {
      if (this.earlyExit) break;
      curLine += textChunk;
      if (!curLine.includes("\n")) continue;
      const lines = curLine.split("\n");
      curLine = lines.pop() || "";
      this.parseLines(lines);
    }
    if (this.earlyExit) return;
    //If we completed generation in inline mode need to auto complete the remaining text
    // if (mode.includes("inline")) {
    //   const inlineStopSeq = await getInlineStopSequence();
    //   const toolEndStr = getToolEndString("ASSISTANT_WRITE_FILE");
    //   //If LLM already outputted the toolEndStr, don't append stuff
    //   if (inlineStopSeq && !curLine.includes(toolEndStr)) {
    //     const latestFileContent = await getLatestFocusedContent();
    //     if (!latestFileContent) {
    //       throw new Error("Expected latest file content");
    //     }
    //     const remainder =
    //       inlineStopSeq +
    //       latestFileContent.postSelection
    //         .split(inlineStopSeq)
    //         .slice(1)
    //         .join(inlineStopSeq);
    //     curLine += remainder;
    //     curLine += toolEndStr;
    //   }
    // }
    if (curLine) {
      this.parse(curLine);
    }
    if (this.earlyExit) return;
  }

  parse(lines: string) {
    this.parseLines(lines.split("\n"));
  }

  parseLines(lines: string[]) {
    lines.forEach(this.parseLine, this);
  }

  parseLine(line: string) {
    //The tool matches are more fuzzy than the actual instructions given to the models, to try to render as far as possible.
    const toolStartMatch = line.match(TOOL_START_MATCH_REGEX);
    let toolEndMatch = Boolean(line.match(TOOL_END_MATCH_REGEX));
    if (toolStartMatch) {
      chatStore.set("messages", [
        ...chatStore.get("messages"),
        new ToolMessage(),
      ]);

      //Sometimes the LLM forgets to put in the end match and starts a new line, so we just help it
      toolEndMatch = true;
    }

    const toolMsgs = getToolMessagesWithoutErrors();
    const latestMsg: ToolMessage | undefined = toolMsgs.at(-1);
    if (!latestMsg) {
      throw new Error("Expected at least one message!");
    }

    latestMsg.contents += `${line}\n`;

    if (
      toolEndMatch &&
      latestMsg.type &&
      TOOL_RENDER_TEMPLATES[latestMsg.type].onFocus
    ) {
      TOOL_RENDER_TEMPLATES[latestMsg.type].onFocus?.(latestMsg as any);
      //TODO: Stop parsing until user finishes focus action
    }

    //Run checks
    const errors = checkRules();

    if (errors.length > 0) {
      //Add the errors to the context window
      const additionalErrors = errorsToMessages(errors);
      chatStore.set("messages", [
        //Remove the latest message with the error
        ...chatStore.get("messages").filter((msg) => msg !== latestMsg),
        ...additionalErrors,
      ]);
      this.earlyExit = true;
      return;
    }

    //Trigger rerender, cos I'm not sure how else to ensure proper updating
    chatStore.set("messages", [...chatStore.get("messages")]);
  }
}

function errorsToMessages(
  errors: ReturnType<typeof checkRules>
): ToolMessage<"USER_TOOL_ERROR">[] {
  return errors.map((err) => {
    const errorMsg = `Type: ${err.type}
{FAULTY_MESSAGE_START} 
${err.faultyMsg?.contents}
{FAULTY_MESSAGE_END} 
Description: ${err.desc}
Message:
${err.errDesc}`;
    return new ToolMessage(
      toolToToolString("USER_TOOL_ERROR", {
        body: errorMsg,
        props: {},
      })
    );
  });
}

function checkRules() {
  const messages = getToolMessagesWithoutErrors();
  const errors: {
    type: string;
    desc: string;
    errDesc: string;
    faultyMsg: ToolMessage | undefined;
  }[] = [];
  Object.entries(TOOL_TEMPLATES).forEach(([toolType, toolMeta]) => {
    const toolRules = TOOL_RENDER_TEMPLATES[toolType as ToolType].rules;
    toolRules.forEach((rule) => {
      const checkResult = rule.check(messages);
      if (checkResult === undefined) return;
      errors.push({
        type: toolType,
        desc: rule.description,
        errDesc: checkResult,
        faultyMsg: messages.at(-1),
      });
    });
  });
  return errors;
}
</file>

<file path="packages/figmapluginui/src/features/Message.tsx">
import OpenAI from "openai";
import {
  NON_RENDERED_TOOLS,
  TOOL_RENDER_TEMPLATES,
  ToolType,
} from "../messages/tools";
import { ToolMessage } from "../messages/ToolMessage";

export type Message = OpenAI.ChatCompletionMessageParam;
export type MessageWithID = { id: string; content: string } & Message;

export type MessageItemProps = {
  message: MessageWithID;
};

export function MessageItem<T extends ToolType>({
  message,
}: {
  message: ToolMessage<T>;
}) {
  if (!message.type || NON_RENDERED_TOOLS.includes(message.type)) return <></>;

  const renderTemplate = TOOL_RENDER_TEMPLATES[message.type];
  const messageClasses = `max-w-[80%] rounded-lg px-4 py-2 ${
    message.role === "user"
      ? "bg-primary text-primary-foreground"
      : message.role === "system"
      ? "bg-gray-300 text-gray-800 dark:bg-gray-700 dark:text-gray-200"
      : "bg-background dark:bg-secondary/70" // Assistant message
  }`;

  return (
    <div
      className={`flex ${
        message.role === "user" ? "justify-end" : "justify-start"
      }`}
    >
      <div className={messageClasses}>
        {/* <div className="text-sm">{renderTemplate.title(message)}</div> */}
        {renderTemplate.body(message)}
      </div>
    </div>
  );
}
</file>

<file path="packages/figmapluginui/src/stores/chatStore.ts">
import { createStore } from "@shared";
import { RawMessage } from "@types";

import toast from "react-hot-toast";
import { Qwen } from "../llm/qwen";
import { LLMOutputParser } from "../messages/LLMOutputParser";
import { CustomMessage } from "../messages/Messages";
import { SystemPromptMessage } from "../messages/SystemPromptMessage";
import { ToolMessage } from "../messages/ToolMessage";
import {
  TOOL_RENDER_TEMPLATES,
  toolToToolString,
  ToolType,
} from "../messages/tools";
import { sendMidEnd } from "../api/sendMidEnd";

const MAX_RETRIES = 3;

/**If you need the same functionality for multiple completion modes, you can include the keywords together.
 * By doing that, we can use the str.contains() function to determin the behaviour
 */
export type CompletionMode = "full"; //| 'edit' | 'inline' | 'inline-edit';

const llm = new Qwen();

export const chatStore = createStore({
  isLoading: false,
  messages: [new SystemPromptMessage()] as CustomMessage[],
  /**
   * full - Can edit multiple files, and full files
   * edit - For fixing a previous prompt
   * inline-edit - For fixing a previous inline prompt
   * inline - For editing a specific part of the code
   */
  mode: "full" as CompletionMode,
  showSettings: false as boolean,
  showVerboseMessages: false as boolean,
});

//@ts-expect-error for debugging
window.chatStore = chatStore;

// export async function getInlineStopSequence(): Promise<string | undefined> {
//   const latestFile = await getLatestFocusedContent();
//   if (!latestFile) {
//     throw new Error("Could not find latest file for inline prompting");
//   }

//   const getTrimmedLines = (str: string) => {
//     return str.split("\n").map((line) => line.trim());
//   };

//   const allLines = getTrimmedLines(latestFile.fullContents);
//   const postSelectionLines = getTrimmedLines(latestFile.postSelection);

//   for (const line of postSelectionLines) {
//     if (allLines.filter((l) => l === line).length !== 1) continue;
//     return line;
//   }

//   return undefined;
// }
export async function updateChatFull(input: string) {
  // Update the prompt with the full data of selected layers
  const layers = await sendMidEnd("getSelectedLayersFull");

  const relevantMessages = chatStore.get("messages").filter((msg) => {
    if (!(msg instanceof ToolMessage)) return true;
    if (!msg.isType("USER_FIGMA_NODE_CONTENTS")) return true;
    if (layers.every((layer) => layer.id == msg.props?.nodeId)) return true;
    //There is a new message for the selected layer, so use the updated data
    return false;
  });

  layers.forEach((layer) => {
    relevantMessages.push(
      new ToolMessage(
        toolToToolString("USER_FIGMA_NODE_CONTENTS", {
          body: layer.nodeString,
          props: {
            nodeName: layer.name,
            nodeId: layer.id,
          },
        })
      )
    );
  });

  // Update the prompt with the user's input
  chatStore.set("messages", [
    ...relevantMessages,
    new ToolMessage(
      toolToToolString("USER_PROMPT", {
        body: input,
        props: {},
      })
    ),
  ]);
}

export async function continuePrompt(
  mode: CompletionMode,
  retryCount: number = 0
) {
  chatStore.set("isLoading", true);
  try {
    const rawMessages = getRawMessages(chatStore.get("messages"));
    const parser = new LLMOutputParser();
    const stopSequences: string[] = [];
    //   if (mode.includes("inline")) {
    //     const additionalStopSeq = await getInlineStopSequence();
    //     if (additionalStopSeq) {
    //       stopSequences.push(additionalStopSeq);
    //     }
    //   }
    const stream = llm.prompt(rawMessages, stopSequences);

    await parser.handleTextStream(stream, mode);

    if (parser.earlyExit) {
      // If we had an error, check retry count
      if (retryCount >= MAX_RETRIES) {
        // Display error message to the user
        toast.error("Max retries exceeded. Please try again later.");
      } else {
        // Run again
        continuePrompt(mode, retryCount + 1);
      }
    }
  } finally {
    chatStore.set("isLoading", false);
  }
}

export function getRawMessages(messages: CustomMessage[]): RawMessage[] {
  const rawMsgs = messages.flatMap((msg) => msg.toRawMessages());
  const concatenatedMessages = rawMsgs.reduce((acc, rawMsg) => {
    const lastMessage = acc[acc.length - 1];
    if (lastMessage && lastMessage.role === rawMsg.role) {
      lastMessage.content += "\n" + rawMsg.content;
    } else {
      acc.push(rawMsg);
    }
    return acc;
  }, [] as RawMessage[]);

  return concatenatedMessages;
}
export function getSelectionDetailsByContent(
  fullContents: string,
  startLine: number,
  endLine: number
) {
  const preSelection =
    fullContents
      .split("\n")
      .slice(0, startLine - 1)
      .join("\n") ?? "";
  const selection =
    fullContents
      .split("\n")
      .slice(startLine - 1, endLine)
      .join("\n") ?? "";
  const postSelection =
    fullContents.split("\n").slice(endLine).join("\n") ?? "";

  return {
    preSelection,
    selection,
    postSelection,
  };
}

// export async function getSelectionDetailsByFile(
//   filePath: string,
//   startLine: number,
//   endLine: number
// ) {
//   const curContents = await trpc.files.getFileContents.query({
//     filePath,
//   });
//   if (curContents === undefined) return undefined;
//   const { preSelection, selection, postSelection } =
//     getSelectionDetailsByContent(curContents, startLine, endLine);
//   return {
//     fullContents: curContents,
//     preSelection,
//     selection,
//     postSelection,
//   };
// }

// export async function getLatestFocusedContent() {
//   const fileContextMsg = [...getToolMessagesWithoutErrors()]
//     .reverse()
//     .find((msg) => msg.type === "USER_FOCUS_BLOCK");

//   if (!fileContextMsg?.isType("USER_FOCUS_BLOCK") || !fileContextMsg.props)
//     return undefined;

//   const startLine = +fileContextMsg.props.startLine;
//   const endLine = +fileContextMsg.props.endLine;
//   const result = await getSelectionDetailsByFile(
//     fileContextMsg.props.filePath,
//     startLine,
//     endLine
//   );

//   if (result === undefined) return undefined;

//   return {
//     ...result,
//     props: fileContextMsg.props,
//   };
// }

export function resetChatStore() {
  chatStore.set("messages", [new SystemPromptMessage()]);
}

// trpc.files.onSelectionChange.subscribe(undefined, {
//   onData: (data) => {
//     //TODO: If taffy window is still active, we should probably add to context instead of completely new
//     resetChatStore();
//     const curMsgs = chatStore.get("messages");
//     const selectionDetails = getSelectionDetailsByContent(
//       data.fullFileContents,
//       data.selectedLineNumbers.start,
//       data.selectedLineNumbers.end
//     );

//     // const fileSelectionMessage = createToolMessage('USER_FILE_CONTENTS', {
//     //   body: data.fullFileContents,
//     //   props: {
//     //     filePath: data.fileName,
//     //   },
//     // });
//     const fullContents =
//       selectionDetails.preSelection +
//       "\n{FOCUS_START}\n" +
//       selectionDetails.selection +
//       "\n{FOCUS_END}\n" +
//       selectionDetails.postSelection;
//     const fileFocusMessage = createToolMessage("USER_FOCUS_BLOCK", {
//       body: fullContents,
//       props: {
//         startLine: String(data.selectedLineNumbers.start),
//         endLine: String(data.selectedLineNumbers.end),
//         filePath: data.fileName,
//       },
//     });
//     chatStore.set("messages", [
//       ...curMsgs,
//       // fileSelectionMessage,
//       fileFocusMessage,
//     ]);
//   },
// });

// chatStore.subscribe("messages", () => {
//   /**TODO: Allow editing in multi file mode - right now there are the following edge cases:
//    * 1. After the edit, the diff view is quite strange
//    * 2. Need to add state for edits that have already been accepted and those who have not been
//    */
//   chatStore.set("mode", getPossibleModes()[0]);
// });

export function removeMessage<T extends ToolType>(message: ToolMessage<T>) {
  chatStore.set("messages", [
    ...chatStore.get("messages").filter((someMsg) => someMsg !== message),
  ]);
  if (!message.type) return;
  const renderTemplate = TOOL_RENDER_TEMPLATES[message.type];
  renderTemplate.onRemove?.(message);
}

export function getToolMessagesWithoutErrors(): ToolMessage[] {
  const allMessages = chatStore.get("messages");
  return allMessages.filter(
    (msg): msg is ToolMessage =>
      msg instanceof ToolMessage && msg.type !== "USER_TOOL_ERROR"
  );
}

// export async function addAddtionalContext(filePath: string) {
//   const data = await trpc.files.getPathContents.query({ filePath });

//   let contents = "";
//   if (data.type === "directory") {
//     contents = data.contents
//       .map((subPath) => `(${subPath.type})${subPath.fullPath}`)
//       .join("\n");
//   } else {
//     contents = data.contents;
//   }

//   const additionalCtxMsg = createToolMessage("USER_FILE_CONTENTS", {
//     body: contents,
//     props: {
//       filePath,
//       type: data.type,
//     },
//   });
//   chatStore.set("messages", [...chatStore.get("messages"), additionalCtxMsg]);
// }

// export async function setAdditionalContext(fileNames: string[]) {
//   const currentMessages = chatStore.get('messages');
//   const newMessages = currentMessages.filter(
//     (msg) => !(msg instanceof ToolMessage && msg.type === 'USER_FILE_CONTENTS')
//   );

//   const newFileContentMessages = (
//     await Promise.all(
//       fileNames.map(async (filePath) => {
//         const data = await trpc.files.getFileContents.query({ filePath });
//         if (data === undefined) return undefined;
//         return createToolMessage('USER_FILE_CONTENTS', {
//           body: data, // Assuming full file contents are fetched elsewhere,
//           props: {
//             filePath: filePath,
//           },
//         });
//       })
//     )
//   ).filter(booleanFilter);

//   const lastFocusIndex = newMessages.findIndex(
//     (msg) => msg instanceof ToolMessage && msg.type === 'USER_FOCUS_BLOCK'
//   );

//   if (lastFocusIndex === -1) {
//     chatStore.set('messages', [...newMessages, ...newFileContentMessages]);
//   } else {
//     chatStore.set('messages', [
//       ...newMessages.slice(0, lastFocusIndex),
//       ...newFileContentMessages,
//       ...newMessages.slice(lastFocusIndex),
//     ]);
//   }
// }
</file>

<file path="packages/figmaplugincore/src/handlerFuncs/updateSelectedLayer.ts">
import { traverse } from "@shared";
import { sendFrontend } from "../messaging";

export async function updateSelectedLayers() {
  if (figma.currentPage.selection.length === 0) {
    sendFrontend("updateSelectedLayers", []);
    return [];
  } else {
    const selectedNodes = await Promise.all(
      figma.currentPage.selection.map(async (node) => {
        return {
          name: node.name,
          id: node.id,
          page: figma.root.name,
        };
      })
    );
    sendFrontend("updateSelectedLayers", selectedNodes);
    return selectedNodes;
  }
}

export async function getSelectedLayersFull() {
  if (figma.currentPage.selection.length === 0) {
    sendFrontend("updateSelectedLayers", []);
    return [];
  } else {
    const selectedNodes = await Promise.all(
      figma.currentPage.selection.map(async (node) => {
        return {
          name: node.name,
          id: node.id,
          page: figma.root.name,
          nodeString: await getNodeStr(node),
          image: await node.exportAsync({
            format: "PNG",
          }),
        };
      })
    );
    sendFrontend("updateSelectedLayers", selectedNodes);
    return selectedNodes;
  }
}

async function getNodeStr(node: SceneNode): Promise<string> {
  const result = (await node.exportAsync({
    format: "JSON_REST_V1",
  })) as any;
  const root = result.document;
  const USELESS_KEYS = new Set([
    "absoluteRenderBounds",
    "background",
    "backgroundColor",
    "blendMode",
    "clipsContent",
    "cornerSmoothing",
    "exportSettings",
    "interactions",
    "scrollBehavior",
    "transitionDuration",
    "transitionEasing",
    "transitionNodeID",
    "fillOverrideTable",
    "constraints",
    "strokeAlign",
    "arcData",
    "counterAxisAlignItems",
    "primaryAxisAlignItems",
    "layoutWrap",
    "layoutMode",
    "layoutGrow",
    "layoutAlign",
    "lineTypes",
    "lineIndentations",
    "styleOverrideTable",
    "characterStyleOverrides",
    "layoutSizingHorizontal",
    "layoutSizingVertical",
    "rotation",
    "primaryAxisSizingMode",
    "itemSpacing",
    "layoutVersion",
    "paddingLeft",
    "paddingRight",
    "paddingTop",
    "paddingBottom",
    "cornerRadius",
    "strokeJoin",
    "strokeCap",
  ]);
  const TYPE_STYLE_USELESS_KEYS = [
    "textAutoResize",
    "textAlignHorizontal",
    "textAlignVertical",
    "letterSpacing",
    "lineHeightPx",
    "lineHeightPercent",
    "lineHeightPercentFontSize",
    "lineHeightUnit",
  ];
  traverse(root, (node) => {
    Object.entries(node).forEach(([key, val]) => {
      if (USELESS_KEYS.has(key)) {
        delete node[key];
        return;
      }
      if (key === "style") {
        for (const uselessTypeStyleKey of TYPE_STYLE_USELESS_KEYS) {
          delete node.style[uselessTypeStyleKey];
        }
      }
      // Remove empty fills, strokes, effects arrays
      if (
        (key === "fills" || key === "strokes" || key === "effects") &&
        Array.isArray(val) &&
        val.length === 0
      ) {
        delete node[key];

        // If strokes is empty, also remove strokeWeight
        if (key === "strokes") {
          delete node["strokeWeight"];
        }
        return;
      }

      // Clean up blendMode and imageRef from fills, strokes, effects arrays
      if (
        (key === "fills" || key === "strokes" || key === "effects") &&
        Array.isArray(val)
      ) {
        val.forEach((item) => {
          if (item) {
            delete item.blendMode;
            delete item.imageRef;
            // Convert color objects to rgba string format
            if (
              item.color &&
              typeof item.color === "object" &&
              "r" in item.color &&
              "g" in item.color &&
              "b" in item.color &&
              "a" in item.color
            ) {
              item.color = roundNumbers(item.color);
              item.color = `rgba(${item.color.r},${item.color.g},${item.color.b},${item.color.a})`;
            }
          }
        });
      }

      // Convert absoluteBoundingBox to a compact string format
      if (
        key === "absoluteBoundingBox" &&
        val &&
        typeof val === "object" &&
        "x" in val &&
        "y" in val &&
        "width" in val &&
        "height" in val
      ) {
        const roundedVal = roundNumbers(val);
        node[
          key
        ] = `x=${roundedVal.x},y=${roundedVal.y},w=${roundedVal.width},h=${roundedVal.height}`;
        return;
      }
    });
  });

  const roundedRoot = roundNumbers(root);
  const stringifiedRoot = stringifyNode(roundedRoot);

  console.log({ roundedRoot, stringifiedRoot });
  return stringifiedRoot;
}

function stringifyNode(node: any): string {
  // Create a copy of the node without children for stringification
  const { children, ...nodeWithoutChildren } = node;

  // Stringify the node without children, removing the outer braces
  const nodeString = JSON.stringify(nodeWithoutChildren).slice(1, -1); // Remove the { and } characters

  // Start with the node details on one line
  let result = `{${nodeString}`;

  // Add children with proper indentation if they exist
  if (children && children.length > 0) {
    result += `, "children": [\n`;

    // Add each child with additional 2 spaces of indentation
    const childrenStrings = children?.map((child: any) => {
      // Recursively stringify each child with proper indentation
      return stringifyNode(child)
        .split("\n")
        .map((line) => `  ${line}`)
        .join("\n");
    });

    result += childrenStrings.join(",\n");
    result += "\n]";
  }

  result += "}";
  return result;
}

function roundNumbers(obj: any): any {
  if (typeof obj === "number") {
    return Number(obj.toFixed(3));
  }

  if (Array.isArray(obj)) {
    return obj.map(roundNumbers);
  }

  if (typeof obj === "object" && obj !== null) {
    const result: Record<string, any> = {};
    for (const key in obj) {
      result[key] = roundNumbers(obj[key]);
    }
    return result;
  }

  return obj;
}
</file>

<file path="packages/figmapluginui/src/messages/tools/toolTemplates.tsx">
import {
  BotIcon,
  FileInputIcon,
  LucideProps,
  ShieldAlertIcon,
  UserIcon,
} from "lucide-react";
import { ToolMessage } from "../ToolMessage";
import { sendMidEnd } from "../../api/sendMidEnd";

import remarkGfm from "remark-gfm";
import ReactMarkdown from "react-markdown";
export type MessageIcon = React.ForwardRefExoticComponent<
  Omit<LucideProps, "ref"> & React.RefAttributes<SVGSVGElement>
>;

export type ToolType = keyof typeof TOOL_TEMPLATES;

export type Tools = {
  [K in ToolType]: {
    body: (typeof TOOL_TEMPLATES)[K]["sampleBody"];
    props:
      | Record<keyof (typeof TOOL_TEMPLATES)[K]["propDesc"], string>
      | undefined;
  };
};

/**returns undefined or a string to pass back to llm to scold it to do better */
type ToolRuleResult = string | undefined;

//TODO: ToolRules need to be moved to render templates for type inference
/**Used to enforce certain formats for the LLM output and to hint it in the right direction if it messes up */
export interface ToolRule {
  /**Description passed to LLM regarding tool usage. */
  description: string;
  /**Checks to be done for the tool. Always just check the latest message, REGARDLESS of type*/
  check: (messagesWithoutErrors: ToolMessage[]) => ToolRuleResult;
}

export interface ToolTemplate {
  DISABLED?: true;
  role: "assistant" | "user";
  desc: string;
  sampleBody: string;
  propDesc: Record<string, string>;
  sampleProps: Record<string, string>;
  /**Used for storing additional data in a particular message, for example the contents at the time of parsing */
  data: object;
}

export const TOOL_TEMPLATES = {
  ASSISTANT_INFO: {
    role: "assistant",
    desc: "For the assistant to write a response to the user.",
    propDesc: {},
    sampleProps: {},
    sampleBody:
      "To fix the problem of buttons blending with the page, we need to identify the color of all the poorly colored buttons. We should avoid updating the color of buttons which only have outlines, because even though have the same background, they stand out via their outline. Then, for each of these buttons with the bad color rgba(W,X,Y,Z), update their color to match the main primary color rgba(W,X,Y,Z).",
    data: {},
  },
  ASSISTANT_CHANGE_COLOR: {
    role: "assistant",
    desc: "Change the background color of a figma node or text by id",
    propDesc: {
      nodeId: "nodeId",
      r: "red",
      g: "green",
      b: "blue",
      a: "alpha",
    },
    sampleProps: {
      nodeId: "123456789",
      r: "0.5",
      g: "0.7",
      b: "0.9",
      a: "1.0",
    },
    sampleBody: "",
    data: {},
  },
  USER_TOOL_ERROR: {
    role: "user",
    desc: "Information regarding incorrect tool usage. The occurence of this indicates a previous generation produced a result that did not follow a particular rule. Take extra notice of the rule that was not followed correctly in subsequent generations",
    propDesc: {},
    sampleProps: {},
    sampleBody: "You cannot change the color of a node that does not exist",
    data: {},
  },
  USER_PROMPT: {
    role: "user",
    desc: "The prompt from the user",
    propDesc: {},
    sampleProps: {},
    sampleBody: `How can I improve my figma design?`,
    data: {},
  },
  USER_FIGMA_NODE_CONTENTS: {
    role: "user",
    desc: "A JSON representing a node selected in figma.",
    propDesc: {
      nodeName: "Node Name",
      nodeId: "Node ID",
    },
    sampleProps: {
      nodeName: "Landing-Desktop",
      nodeId: "133:221",
    },
    sampleBody: `TODO`,
    data: {},
  },
} satisfies Record<string, ToolTemplate>;

export const NON_RENDERED_TOOLS: ToolType[] = [
  "USER_FIGMA_NODE_CONTENTS",
  "USER_TOOL_ERROR",
];

type ToolAction<ToolName extends ToolType> = (
  message: ToolMessage<ToolName>
) => void;

export type ToolActionMeta<ToolName extends ToolType> = {
  name: string;
  action: ToolAction<ToolName>;
  /**For a keyboard shortcut Ctrl+T, or Ctrl+1+T for an older
   * message for example, just put 't' as the shortcut - it
   * will be concatenated to the end */
  shortcutEnd: string;
};
export type ToolRenderTemplate<ToolName extends ToolType> = {
  Icon: MessageIcon;
  title: (message: ToolMessage<ToolName>) => React.ReactNode;
  body: (message: ToolMessage<ToolName>) => React.ReactNode;
  content: (message: ToolMessage<ToolName>) => string; // THIS IS FOR SHOWING MARKDOWN BUT ITS QUITE BUGGY. FIX AND USE THIS IN THE UI NEXT TIME
  onRemove?: ToolAction<ToolName>;
  onFocus?: ToolAction<ToolName>;
  actions?: ToolActionMeta<ToolName>[];
  rules: ToolRule[];
};
export const TOOL_RENDER_TEMPLATES: {
  [ToolName in ToolType]: ToolRenderTemplate<ToolName>;
} = {
  // What user said
  USER_PROMPT: {
    Icon: UserIcon,
    title: () => "You",
    body: (data) => data.body,
    content: (data) => data.contents,
    rules: [],
  },
  // What Taffy said
  ASSISTANT_INFO: {
    Icon: BotIcon,
    title: () => "Taffy",
    body: (data) => (
      <ReactMarkdown
        remarkPlugins={[remarkGfm]}
        components={{
          hr: ({ node, ...props }) => (
            <hr
              style={{ marginTop: "12px", marginBottom: "12px" }}
              {...props}
            />
          ),
          pre: ({ node, ...props }) => (
            <pre
              {...props}
              style={{
                whiteSpace: "pre-wrap",
                wordBreak: "break-all",
                backgroundColor: "black",
                color: "white",
              }}
            />
          ),
          ul: ({ node, ...props }) => (
            <ul
              className="list-disc ml-6 my-4"
              style={{ marginBottom: "12px" }}
              {...props}
            />
          ),
          ol: ({ node, ...props }) => (
            <ul
              className="list-decimal ml-6 my-4"
              style={{ marginBottom: "12px" }}
              {...props}
            />
          ),
        }}
      >
        {data.body}
      </ReactMarkdown>
    ),

    content: (data) => data.contents,
    rules: [],
  },
  ASSISTANT_CHANGE_COLOR: {
    Icon: BotIcon,
    title: () => "Change color",
    content: (data) => data.body,
    body: (data) => {
      if (data.props === undefined) return "";
      const { nodeId, r, g, b, a } = data.props;
      return `${nodeId} : rgba(${r}, ${g}, ${b}, ${a})`;
    },
    rules: [],
    onFocus: (data) => {
      if (!data.props) return;
      sendMidEnd("handleChangeColor", data.props);
    },
  },
  USER_TOOL_ERROR: {
    Icon: ShieldAlertIcon,
    title: () => "Tool error",
    body: (data) => data.body,
    content: (data) => data.contents,
    rules: [],
  },
  // Figma node contents
  USER_FIGMA_NODE_CONTENTS: {
    Icon: FileInputIcon,
    title: () => "Figma Node Added",
    body: (data) => {
      if (!data.props) return;
      return data.props.nodeName;
    },
    content: (data) => data.props?.nodeName ?? "",
    rules: [],
  },
};
</file>

<file path="packages/figmapluginui/src/App.tsx">
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Candy, Moon, Send, SquarePen, Sun } from "lucide-react";
import { useEffect, useRef, useState } from "react";
import { MessageItem } from "./features/Message";
import { SelectionDisplay } from "./features/SelectionDisplay";
import { useDarkMode } from "./hooks/useDarkMode";
// import { useHandleSelectionUpdate } from "./hooks/useHandleSelectionUpdate";
import { ToolMessage } from "./messages/ToolMessage";
import {
  chatStore,
  continuePrompt,
  resetChatStore,
  updateChatFull,
} from "./stores/chatStore";
import { Skeleton } from "@/components/ui/skeleton";

export default function App() {
  // useHandleSelectionUpdate();
  const { isDarkMode, setIsDarkMode } = useDarkMode();
  const messages = chatStore.use("messages");
  const isLoading = chatStore.use("isLoading");
  const [input, setInput] = useState("");
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;
    await updateChatFull(input);
    continuePrompt("full");
    setInput("");
  };

  return (
    <TooltipProvider>
      <div className="bg-background text-foreground h-screen flex flex-col border-none rounded-none">
        {/* TITLEBAR */}
        <div className="space-y-1.5 p-4 border-b flex flex-row justify-between items-center">
          <div className="font-semibold leading-none tracking-tight flex flex-row items-center gap-1.5">
            <Candy className="ml-1" size={20} />
          </div>
          <div className="flex items-center space-x-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => resetChatStore()}
                >
                  <SquarePen />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>New chat</p>
              </TooltipContent>
            </Tooltip>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => setIsDarkMode(!isDarkMode)}
                >
                  {isDarkMode ? <Moon /> : <Sun />}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Toggle dark mode</p>
              </TooltipContent>
            </Tooltip>
          </div>
        </div>

        {/* MESSAGE AREA */}
        <div className={`flex-1 p-4 overflow-y-auto`}>
          {messages.length === 1 ? (
            <p className="text-muted-foreground text-center grid place-items-center h-full">
              Select layers to add context
            </p>
          ) : (
            <div className="space-y-4">
              {messages.map((message) =>
                message instanceof ToolMessage ? (
                  <MessageItem key={message.id} message={message} />
                ) : (
                  <></>
                )
              )}
              {/* Add Skeleton loader only when loading AND the last message isn't the assistant's response yet */}
              {isLoading && messages[messages.length - 1]?.role !== "assistant" && (
                <div className="flex justify-start">
                  <Skeleton className="h-10 w-48 rounded-lg bg-background dark:bg-secondary/70" />
                </div>
              )}
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* FOOTER */}
        <div className="flex flex-col">
          <SelectionDisplay />
          <form
            onSubmit={handleSubmit}
            className="flex w-full gap-2 px-4 pt-3.5 pb-5"
          >
            <Input
              value={input}
              onChange={handleInputChange}
              placeholder="Send a message to start the conversation..."
              className="flex-1"
              disabled={isLoading}
            />
            <Tooltip>
              <TooltipTrigger asChild>
                <Button type="submit" size="icon" disabled={isLoading}>
                  <Send className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Send message</p>
              </TooltipContent>
            </Tooltip>
          </form>
        </div>
      </div>
    </TooltipProvider>
  );
}
</file>

</files>
